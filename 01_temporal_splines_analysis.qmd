---
title: "Temporal splines PLATCOV"
author: "James Watson and Phrutsamon Wongnak"
format: pdf
editor: visual
---

```{r}
knitr::opts_chunk$set(cache = T, cache.comments = FALSE,
                      echo = F, include = TRUE, 
                      fig.width = 8, fig.height = 8,
                      fig.pos = 'H',dev = 'pdf', dpi = 300)

```

```{r}
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(mgcv)
library(tidymv)
library(splines)
library(scales)
library(ggnewscale)
library(dplyr)
library(ggpubr)
library(grid)
library(loo)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = c(5.5, 8)
study_threshold = 1.2
RUN_MODELS = F

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
```

## Load data

Set up analysis

```{r}

intervention = 'Unblinded_meta' # prefix of analysis file
ref_arm = 'No study drug'
```

```{r load_data}
#| echo: false
# set as file with relevant dataset
itt_population_all = get_itt_population(prefix_drop_rand = prefix_drop_rand)

f_name = paste0("Analysis_Data/", intervention,'_analysis.csv')
platcov_dat = read.csv(f_name)
platcov_dat$Rand_date = as.POSIXct(platcov_dat$Rand_date)
trt_intervention = unique(platcov_dat$Trt)

if(!all(platcov_dat$ID %in% itt_population_all$ID)) stop('IDs do not match ITT population')

writeLines(sprintf('Missing patients in %s arm:',trt_intervention))
ind = itt_population_all$Treatment%in%trt_intervention &
  !itt_population_all$ID %in% platcov_dat$ID

itt_population_all$ID[ind]
itt_population_all$Treatment[ind]
# interventions
if(length(trt_intervention)==0) stop('no interventions!')
trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
```

## Make modified intention to treat population

```{r make_analysis_data}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID) %>%
  mutate(
    mITT = any(Per_protocol_sample==1 & Timepoint_ID>=3) &
      !all(CT_NS==40))

pop_table = platcov_dat %>% distinct(ID, .keep_all = T)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT)
```

```{r}
platcov_dat$VariantClass_new <- as.character(platcov_dat$Variant)
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("BA.5.2", "BA.5.5", "BQ.1")] <- "BA.5"
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("BN.1.2", "BN.1.3", "CH.1.1")] <- "BA.2.75"
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("XBB1.5-like with F456L")] <- "XBB.1.5-like"
platcov_dat$VariantClass_new <- as.factor(platcov_dat$VariantClass_new)
```

## Baseline characteristics

```{r}
#| echo: false
platcov_dat = platcov_dat %>% ungroup() %>%
  mutate(Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
        Study_time_normal = Study_time,
         Study_time = scale(Study_time) ) %>%
  group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         Sex = as.factor(ifelse(Sex==1,'Male','Female')),
         Site = as.factor(Site),
         Trt = factor(Trt, levels=c(ref_arm, trts)),
         Vaccinated = as.factor(ifelse(N_dose>0,'Yes','No')),
         Variant = as.factor(Variant)#normalise
         )  %>%
  ungroup() %>%
  mutate(trt_color = brewer.pal(name = 'Dark2',8)[c(1,7)][as.numeric(Trt)]) 

Baseline_data = platcov_dat %>% ungroup() %>% 
  distinct(ID, .keep_all = T) %>%
  filter(Timepoint_ID==0) %>% 
  mutate(Baseline.viral.load = daily_VL)


tab.ff <- Baseline_data %>% filter(mITT) %>%
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'Sex','BMI', "Weight", "Baseline.viral.load", 
                    "VariantClass_new",'Symptom_onset','Vaccinated','Fever_Baseline'),
    total_col = T, # add column with statistics for the whole sample
    add_row_total = F, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics in mITT population",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
```

```{r}
# Baseline viral loads
 Baseline_data %>% filter(mITT) %>%
   group_by(Trt) %>%
   summarise(Q1 = round(quantile(Baseline.viral.load, 0.25),1),
             Q2 = round(quantile(Baseline.viral.load, 0.5),1),
             Q3 = round(quantile(Baseline.viral.load, 0.75),1),
             mean = round(mean(Baseline.viral.load),1))
 
 # Days since symptom onset
 Baseline_data %>% filter(mITT) %>%
  group_by(Trt) %>%
  summarise(med =  quantile(Symptom_onset, c(0.5), na.rm = T),
            low = quantile(Symptom_onset, c(0.25), na.rm = T),
            up = quantile(Symptom_onset, c(0.75), na.rm = T)
            )
```

## Missing data

```{r}
missing_dat <- platcov_dat %>%
  filter(mITT, Timepoint_ID != 8) %>%
  group_by(ID) %>%
  distinct(Timepoint_ID, .keep_all = TRUE) %>%
  ungroup() %>%
  complete(ID, Timepoint_ID) %>%
  group_by(ID) %>%
  fill(Trt)

missing_dat$missing <- 0
missing_dat$missing[is.na(missing_dat$log10_viral_load)] <- 1

missing_dat_plot <- missing_dat %>%
    group_by(Timepoint_ID, Trt) %>%
    summarize(missing_count =  sum(missing),
              total = n()) %>%
    mutate(percent_missing = round(missing_count*100/total,1))
missing_dat_plot
```

```{r}
missing_dat_plot$Trt <- as.factor(missing_dat_plot$Trt)
levels(missing_dat_plot$Trt)[7] <- "Ritonavir-boosted nirmatrelvir"
levels(missing_dat_plot$Trt)[3] <- "Casirivimab/imdevimab"

missing_dat_plot$percent_missing_lab <- format(round(missing_dat_plot$percent_missing, 1), nsmall = 1) 
missing_dat_plot$col <- ifelse(missing_dat_plot$percent_missing <50, "white", "black")


G_missing <- ggplot(missing_dat_plot, aes(x = as.factor(Timepoint_ID), y = Trt, fill = percent_missing)) +
  geom_tile(col = "white") +
  geom_text(aes(label=percent_missing_lab, col = col)) +
  scale_color_manual(values = rev(c("white", "black")), guide = "none") +
  scale_fill_viridis_c(guide = "none") +
  theme_bw() +
  xlab("Time since randomisation (days)") +
  ylab("") +
  ggtitle("Percentage of missing data") +
  theme(axis.text = element_text(size = 11),
        axis.title = element_text(size = 12, face = "bold"),
        plot.title = element_text(size = 14, face = "bold"),
        panel.spacing = unit(1, "lines")) 
G_missing
```

```{r}
# png("Plots/missing_data.png", width = 8, height = 5, units = "in", res = 400)
# G_missing
# dev.off()
# 
# pdf("Plots/PDF/missing_data.pdf", width = 8, height = 5)
# G_missing
# dev.off()
```

## Vaccines

```{r}
table(Baseline_data[Baseline_data$mITT,]$Fully_vaccination_yn, useNA = "always")
table(Baseline_data[Baseline_data$mITT,]$Any_dose, useNA = "always")
```

## Vaccine over time

```{r}
Baseline_data$vac_dose_gr <- NA 
Baseline_data$vac_dose_gr[Baseline_data$N_dose > 3] <- "More than 3doses"
Baseline_data$vac_dose_gr[Baseline_data$N_dose == 3] <- "3 doses"
Baseline_data$vac_dose_gr[Baseline_data$N_dose == 2] <- "2 doses"
Baseline_data$vac_dose_gr[Baseline_data$N_dose == 1] <- "1 dose"
Baseline_data$vac_dose_gr[Baseline_data$N_dose == 0] <- "0 dose"
Baseline_data$vac_dose_gr <- as.factor(Baseline_data$vac_dose_gr)
Baseline_data$vac_dose_gr <- factor(Baseline_data$vac_dose_gr, levels = rev(levels(Baseline_data$vac_dose_gr )))
#levels(Baseline_data$vac_dose_gr)

Baseline_data$mrna_gr <- NA 
Baseline_data$mrna_gr[Baseline_data$N_dose_mRNA > 2] <- "More than 2 mRNA vaccine doses"
Baseline_data$mrna_gr[Baseline_data$N_dose_mRNA == 2] <- "2 mRNA vaccine doses"
Baseline_data$mrna_gr[Baseline_data$N_dose_mRNA == 1] <- "1 mRNA vaccine dose"
Baseline_data$mrna_gr[Baseline_data$N_dose_mRNA == 0] <- "0 mRNA vaccine dose"
Baseline_data$mrna_gr <- as.factor(Baseline_data$mrna_gr)
Baseline_data$mrna_gr <- factor(Baseline_data$mrna_gr, levels =   rev(levels(Baseline_data$mrna_gr)))

vaccine_lab <- Baseline_data %>%
  group_by(vac_dose_gr) %>%
  summarise("lab" = paste0("n = ", n()))

G_vaccine <- ggplot(Baseline_data) +
  geom_jitter(aes(x = as.Date(Rand_date), y = vac_dose_gr, col = Time_since_last_dose#, shape = as.factor(time_vac_type)
                  ),
              size = 3, alpha = 0.65, height = 0.07)  +
  geom_vline(xintercept = seq.Date(as.Date("2022-01-01"), as.Date("2024-01-01"), "12 months"), col = "red", linetype = "dashed") +
  scale_colour_viridis_c(name = "Time since last vaccination (days)") +
  scale_shape_manual(values = c(17, 16), guide = "none") +
  theme_bw() +
  xlab("Randomisation date") +
  ylab("") +
 # facet_grid(vac_dose_gr~.,scales="free", space="free") +
  theme(axis.text = element_text(size = 11),
        axis.title = element_text(size = 12, face = "bold"),
        plot.title = element_text(size = 14, face = "bold"),
        panel.spacing = unit(1, "lines"),
        legend.position = "bottom") +
  geom_text(data = vaccine_lab, aes(x = as.Date("2021-05-01"), y = vac_dose_gr,
                                    label = lab), hjust = 0)
G_vaccine
```

```{r}
# png(("Plots/Vaccine_over_time.png"), width = 8, height = 5, units = "in", res = 400)
# G_vaccine
# dev.off()
# 
# pdf(("Plots/PDF/Vaccine_over_time.pdf"), width = 8, height = 5)
# G_vaccine
# dev.off()

```

## Fit models

```{r}
#| echo: false
source('priors.R')

covs_base = c('Site') #'Study_time'
covs_full=c(covs_base, 'Age_scaled','Symptom_onset','N_dose','Sex')

# Analysis data
platcov_dat_analysis_list = list()
stan_inputs = list()

for(i in 1:length(Dmax)){
  platcov_dat_analysis_list[[i]] = 
  platcov_dat %>% ungroup() %>%
  filter(Time <= Dmax[i], mITT) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 
  
writeLines(sprintf('Analysis dataset for follow-up duration of %s days contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   max(floor(platcov_dat_analysis_list[[i]]$Time)),
                   length(unique(platcov_dat_analysis_list[[i]]$ID)),
                   nrow(platcov_dat_analysis_list[[i]]),
                   sum(platcov_dat_analysis_list[[i]]$CT_NS<40),
                   round(100*mean(platcov_dat_analysis_list[[i]]$CT_NS<40))))

stan_inputs[[i]] = 
  make_stan_inputs(input_data_fit = platcov_dat_analysis_list[[i]],
                   int_covs_base = covs_base,
                   int_covs_full = covs_full,
                   slope_covs_base = covs_base,
                   slope_covs_full = covs_full,
                   trt_frmla = formula('~ Trt * VariantClass_new'), #'~ Trt'
                   Dmax = Dmax[i])
  
}
```

```{r setup_models}
all_mods = c("Stan_models/Temporal_spline_proportional.stan",
             "Stan_models/Temporal_spline_additive.stan")

model_settings = expand.grid(mod = all_mods,
                             prior = 1:2,
                             cov_matrices = 1:2, 
                            # dataset = 1:2,
                             Dmax = Dmax,
                             num_knots_alpha = 20,
                             spline_degree_alpha = 4,
                             num_knots_beta = 20,
                             spline_degree_beta = 4)

model_settings$dataset <- 1
model_settings$dataset[model_settings$Dmax == Dmax[2]] <- 2


model_settings$Niter = 4000
model_settings$Nwarmup = 2000
model_settings$Nthin = 4
model_settings$Nchain = 4

model_settings$intervention <- intervention

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')
save(model_settings, 
     platcov_dat_analysis_list,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

```{r}
if(RUN_MODELS){
  system(paste('Rscript --vanilla run_models_local.R',intervention))
}
```

```{r}
ff = list.files('Rout/01_Rout_temporal_splines_analysis')
ff = paste0('Rout/01_Rout_temporal_splines_analysis/',ff)
```

# Baseline viral load dynamics

### GAM mod 1: Baseline viral loads vs Time

```{r}
Baseline_vl_data_Plot <- Baseline_data[Baseline_data$mITT,]
vars <- levels(Baseline_vl_data_Plot$VariantClass_new)

Baseline_vl_data_Plot$VariantClass_new <- factor(Baseline_vl_data_Plot$VariantClass_new, levels = vars[c(6, 1:5,8,9,7)])

mod1 <- gam(Baseline.viral.load ~ s(Study_time), 
                      data = Baseline_vl_data_Plot) 
pred_mod1 <- predict_gam(mod1)
pred_mod1$Rand_date <-  back_transfrom_date(platcov_dat, pred_mod1$Study_time)

mycolors <-  c("#E41A1C", "#377EB8", "#4DAF4A", "black", "#984EA3", "#FF8400", "#2B3499", "#E95793", "#999999")


Gr_mod1 <- pred_mod1 %>%
  ggplot(aes(Rand_date, fit)) +
  geom_point(data = Baseline_vl_data_Plot, aes(x = Rand_date, y = Baseline.viral.load, col = VariantClass_new, alpha = VariantClass_new, shape = VariantClass_new),
             size = 2.5) +
  geom_smooth_ci(linewidth = 1.5, col = "black", ci_alpha = 0.25) +
  theme_bw() +
  xlab("Randomisation date") +
  ylab("Time since symptomp onset (days)") +
  theme(axis.text = element_text(size = 11, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        plot.title = element_text(size = 14, face = "bold"),
        panel.spacing = unit(1, "lines"),
        legend.position = "bottom") +
    scale_color_manual(values = mycolors, name = "Variants") +
    scale_y_continuous(labels=label_math(), breaks = seq(0,9,1)) +
  xlab("Randomisation date") +
  ylab("Baseline SARS-CoV-2 genomes/mL") +
  scale_alpha_manual(values = rep(0.6, length(vars)), guide = "none") +
  scale_shape_manual(values = rep(19, length(vars)), name = "Variants") +
   guides(col=guide_legend(nrow=2),
         shape = guide_legend(override.aes = list(size = 4)))

print(Gr_mod1)

```

```{r}
# png("Plots/Figx_baseline_viral_loads.png", width = 8, height = 6, units = "in", res = 400)
# Gr_mod1
# dev.off()
# 
# pdf("Plots/PDF/Figx_baseline_viral_loads.pdf", width = 8, height = 6)
# Gr_mod1
# dev.off()
```

### GAM mod 2: Symptom onset vs Baseline viral loads

```{r}
Baseline_vl_data_Plot <- Baseline_data[Baseline_data$mITT,]
#Impute
Baseline_vl_data_Plot$Symptom_onset[is.na(Baseline_vl_data_Plot$Symptom_onset)] <- 2
Baseline_vl_data_Plot$Symptom_onset[(Baseline_vl_data_Plot$Symptom_onset) == 0] <- 1

Baseline_vl_data_Plot$Symptom_onset_round <- ceiling(Baseline_vl_data_Plot$Symptom_onset)

Baseline_vl_data_Plot$Symptom_onset_round_factor <- as.factor(Baseline_vl_data_Plot$Symptom_onset_round)

mod2 <- gam(Baseline.viral.load ~ s(Symptom_onset_round, k=4), 
            data = Baseline_vl_data_Plot) 

pred_mod2 <- predict_gam(mod2)

Gr_mod2 <- pred_mod2 %>%
  ggplot(aes(Symptom_onset_round, fit)) +
   geom_jitter(data = Baseline_vl_data_Plot, aes(x = Symptom_onset_round_factor, y = Baseline.viral.load),
                size = 2, alpha = 0.5, width = 0.3, col = "#435585") +
  
  geom_violin(data = Baseline_vl_data_Plot, aes(x = Symptom_onset_round_factor, y = Baseline.viral.load),
              trim=T, fill='#8CC0DE', linewidth = 0.75, width = 0.75, alpha = 0.5) +
  geom_boxplot(data = Baseline_vl_data_Plot, aes(x = Symptom_onset_round_factor, y = Baseline.viral.load),
               width=0.1, size = 0.75,outlier.shape = NA,  coef = 0, alpha = 0.5) +
  geom_smooth_ci(linewidth = 1.5, col = "#D80032", ci_alpha = 0.25) +
  theme_bw() +
  xlab("Time since symptom onset (days)") +
  ylab("Baseline SARS-CoV-2 genomes/mL") +
  ggtitle("A") +
  theme(axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10),
        plot.title = element_text(size = 13, face = "bold")) +
  scale_y_continuous(labels=label_math(), breaks = seq(0,9,2))

Gr_mod2

writeLines(sprintf('R-squared = %s',
                   round(summary(mod2)$r.sq,4)))
```

```{r}
mod2_lm <- lm(Baseline.viral.load ~ Symptom_onset_round, 
            data = Baseline_vl_data_Plot) 

summary(mod2_lm)

cor.test(Baseline_vl_data_Plot$Baseline.viral.load, Baseline_vl_data_Plot$Symptom_onset_round)

```

### GAM mod 3: Symptom onset vs time

```{r}
Baseline_vl_data_Plot <- Baseline_data[Baseline_data$mITT,]
#Impute
Baseline_vl_data_Plot$Symptom_onset[is.na(Baseline_vl_data_Plot$Symptom_onset)] <- 2
Baseline_vl_data_Plot$Symptom_onset[(Baseline_vl_data_Plot$Symptom_onset) == 0] <- 1

Baseline_vl_data_Plot$Symptom_onset_round <- ceiling(Baseline_vl_data_Plot$Symptom_onset)

Baseline_vl_data_Plot$Symptom_onset_round_factor <- as.factor(Baseline_vl_data_Plot$Symptom_onset_round)


mod3 <- gam(Symptom_onset_round ~ s(Study_time), 
                      data = Baseline_vl_data_Plot) 

pred_mod3 <- predict_gam(mod3)


pred_mod3$Rand_date <-  back_transfrom_date(platcov_dat, pred_mod3$Study_time)

omicron_date <- min(Baseline_vl_data_Plot$Rand_date[Baseline_vl_data_Plot$VariantClass_new == "BA.1"])
omicron_date_2 <- max(Baseline_vl_data_Plot$Rand_date[Baseline_vl_data_Plot$VariantClass_new == "BA.1"])

Gr_mod3 <- pred_mod3 %>%
  ggplot(aes(Rand_date, fit)) +
  geom_vline(xintercept = omicron_date, linetype = "dashed", linewidth = 0.75) +
  geom_point(data = Baseline_vl_data_Plot, aes(x = Rand_date, y = Symptom_onset_round),
             size = 2, alpha = 0.3, col = "#435585") +
  geom_smooth_ci(linewidth = 1.5, col = "#D80032", ci_alpha = 0.25) +
  theme_bw() +
  xlab("Randomisation date") +
  ylab("Time since symptom onset (days)") +
  ggtitle("B") +
  theme(axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10),
        plot.title = element_text(size = 13, face = "bold")) 

Gr_mod3
```

### GAM mod 4: Baseline viral loads vs time by symptom onset

```{r}
Baseline_vl_data_Plot <- Baseline_data[Baseline_data$mITT,]
#Impute
Baseline_vl_data_Plot$Symptom_onset[is.na(Baseline_vl_data_Plot$Symptom_onset)] <- 2
Baseline_vl_data_Plot$Symptom_onset[(Baseline_vl_data_Plot$Symptom_onset) == 0] <- 1

Baseline_vl_data_Plot$Symptom_onset_round <- ceiling(Baseline_vl_data_Plot$Symptom_onset)

Baseline_vl_data_Plot$Symptom_onset_round_factor <- as.factor(Baseline_vl_data_Plot$Symptom_onset_round)

vars <- levels(Baseline_vl_data_Plot$VariantClass_new)

Baseline_vl_data_Plot$VariantClass_new <- factor(Baseline_vl_data_Plot$VariantClass_new, levels = vars[c(6, 1:5,8,9,7)])


mod4 <- gam(Baseline.viral.load ~ s(Symptom_onset_round, k=4) + 
                                  s(Study_time) +
                                  s(Study_time, by = Symptom_onset_round), 
                                  data = Baseline_vl_data_Plot) 

pred_mod4 <- predict_gam(mod4, values = list(Symptom_onset_round = c(1,2,3,4)))
pred_mod4$Rand_date <-  back_transfrom_date(platcov_dat, pred_mod4$Study_time)

pred_mod4$Symptom_onset_round <- as.factor(pred_mod4$Symptom_onset_round)
levels(pred_mod4$Symptom_onset_round)  <- c("1 day", "2 days", "3 days", "4 days")

Baseline_vl_data_Plot$Symptom_onset_round <- as.factor(Baseline_vl_data_Plot$Symptom_onset_round)
levels(Baseline_vl_data_Plot$Symptom_onset_round)  <- c("1 day", "2 days", "3 days", "4 days")

mycolors <-  c("#E41A1C", "#377EB8", "#4DAF4A", "black", "#984EA3", "#FF8400", "#2B3499", "#E95793", "#999999")

pred_mod4$Rand_date <- as.Date(pred_mod4$Rand_date)

Gr_mod4 <-pred_mod4 %>%
  ggplot(aes(Rand_date, fit)) +
  geom_point(data = Baseline_vl_data_Plot, 
             aes(x = as.Date(Rand_date), y = Baseline.viral.load, col = VariantClass_new, alpha = VariantClass_new),
             size = 2) +
  scale_color_manual(values = mycolors, name = "Variants") +
  facet_wrap(.~ Symptom_onset_round, ncol = 4) +
  guides(col = guide_legend(override.aes = list(size = 4))) +
  ggnewscale::new_scale_color() +
  geom_smooth_ci(Symptom_onset_round,  linewidth = 1, col = "#D80032", ci_alpha = 0.25) +
  scale_linetype_manual(values = rep("solid",5), guide = "none") +
  theme_bw() +
  xlab("Randomisation date") +
  ylab("Baseline SARS-CoV-2 genomes/mL") +
  theme(axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10),
        legend.position = "bottom",
        strip.text = element_text(size = 10, face = "bold"),
        plot.title = element_text(size = 13, face = "bold")) +
  scale_alpha_manual(values = rep(0.6, length(vars)), guide = "none") +
  ggtitle("C Temporal dynamics of baseline viral densities by time since symptom onset") +
  scale_y_continuous(labels=label_math(), breaks = seq(0,9,2)) +
  scale_x_date(date_labels = "%b-%y")

Gr_mod4
```

```{r}
Gr_mgcv <- ggarrange(ggarrange(Gr_mod2, NULL, Gr_mod3, ncol = 3, 
                               #labels = c("A","", "B"), 
                               align = "hv", widths = c(1,0.05,1)),
               NULL,
               Gr_mod4,
               nrow = 3, 
              # labels = c("", "", "C"), 
               heights = c(1, 0.1, 1.2)
)

Gr_mgcv
```

```{r}
# png("Plots/Figx_onset_dynamics_all.png", width = 10, height = 8, units = "in", res = 350)
# print(Gr_mgcv)
# dev.off()
# 
# pdf("Plots/PDF/Figx_onset_dynamics_all.pdf", width = 10, height = 8)
# print(Gr_mgcv)
# dev.off()
```

# Plot dynamics before vs after

```{r}
plot_dat <- platcov_dat %>%
  filter(mITT, Timepoint_ID != 8, Trt == "No study drug")

plot_dat$Epoch_2 <- "Before Jan 2023" 
plot_dat$Epoch_2[plot_dat$Rand_date >= as.Date("2023-01-01")] <- "After Jan 2023"
plot_dat$Epoch_2 <- as.factor(plot_dat$Epoch_2)
plot_dat$Epoch_2 <- factor(plot_dat$Epoch_2, levels = c("Before Jan 2023", "After Jan 2023"))
                             
plot_dat <- plot_dat %>%  
  group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load))

plot_dat_daily <- unique(plot_dat[,c("ID", "Trt", "Timepoint_ID", "Epoch_2", "daily_VL")])

med_data <- plot_dat_daily %>%
  group_by(Epoch_2, Timepoint_ID, Trt) %>%
  summarise(daily_VL = median(daily_VL))

n_tab <- table(unique(plot_dat[,c("ID", "Epoch_2")])[,2])



Gr_dynamics <- ggplot() +
  geom_jitter(data = plot_dat_daily, aes(x = Timepoint_ID, y = daily_VL,
                                         col = Epoch_2), alpha = 0.3, width = 0.15,
              shape = 21, size = 2) +
  geom_line(data = med_data %>% filter(Timepoint_ID <=7), aes(x = Timepoint_ID, y = daily_VL,
                                         col = Epoch_2), linewidth = 1) +
  
  geom_line(data = med_data %>% filter(Timepoint_ID >=7), aes(x = Timepoint_ID, y = daily_VL,
                                         col = Epoch_2), linewidth = 0.75, linetype = "dashed") +
  
  geom_point(data = med_data, aes(x = Timepoint_ID, y = daily_VL,
                                         fill = Epoch_2), size = 3.5, shape = 24) +
  theme_bw() +
  scale_fill_manual(values = c("#005AB5",  "#DC3220"), name = "") + # "#F99417",
  scale_colour_manual(values = c("#005AB5",  "#DC3220"), name = "") + # "#F99417",
  scale_x_continuous(breaks = 0:14) +
  scale_y_continuous(labels=label_math(), breaks = seq(0,8,2), limits = c(0,9)) +
  xlab("Time since randomisation (days)") +
  ylab("SARS-CoV-2 genomes/mL") + 
  theme(axis.title  = element_text(face = "bold"),
        plot.title = element_text(face = "bold"),
        legend.position = "bottom",
        axis.text = element_text(size = 10),
        strip.text = element_text(size = 10, face = "bold")) +
  annotate(geom = "text", x = 8, y = 8.5, label = paste0("Before Jan 2023: n = ", n_tab[1]), hjust = 0) +
  annotate(geom = "text", x = 8, y = 8, label = paste0("After Jan 2023: n = ", n_tab[2]),
           hjust = 0) +
  facet_grid(.~ Trt)
Gr_dynamics 
```

```{r}
# png("Plots/Figx_dynamics_before_after.png", width = 5, height = 5, units = "in", res = 350)
# Gr_dynamics
# dev.off()

# pdf("Plots/PDF/Figx_dynamics_before_after.pdf", width = 5, height = 5)
# Gr_dynamics
# dev.off()
```

# Splines fit for clearance rate

### Choosing results

```{r}
resDir <- "Rout/01_Rout_temporal_splines_analysis" # "Rout/01_Rout_temporal_splines_analysis_variants" 
list_files <- list.files(resDir)

dmax <- 8 #5.5 8
mod <- "Stan_models/Temporal_spline_proportional.stan" # "Stan_models
cov <- 2 #2
prior <- 1 #2

ind_res <- which(model_settings$Dmax == dmax & model_settings$mod == mod &
                   model_settings$cov_matrices == cov & model_settings$prior == prior)

load(paste0(resDir, "/", list_files[grep(paste0("fits_", ind_res, ".RData"), list_files)])) 
```

### Plotting trend of clearance rate

```{r}
n_id <- stan_inputs[[model_settings$dataset[ind_res]
]]$analysis_data_stan$n_id
ind_start <- stan_inputs[[model_settings$dataset[ind_res]
]]$analysis_data_stan$ind_start


post_beta_hat <- rstan::extract(out, "beta_hat")[[1]]
post_trt_slope <- rstan::extract(out, "trt_slope")[[1]]
post_trt_theta_rand_id <- rstan::extract(out, "theta_rand_id")[[1]]
post_trt_beta_cov <- rstan::extract(out, "beta_cov")[[1]]

slope_ALL <- matrix(NA, ncol = n_id, nrow = 2000)
slope_trt <- matrix(NA, ncol = n_id, nrow = 2000)
  

if(mod == "Stan_models/Temporal_spline_proportional.stan") {
  for (j in 1:n_id) {
    slope_ALL[, j]  <-
      post_beta_hat[, j] * exp(post_trt_slope[, ind_start[j]] +  post_trt_theta_rand_id[, j, 2] +  post_trt_beta_cov[, ind_start[j]])
    slope_trt[, j] <-
      post_beta_hat[, j] * exp(post_trt_slope[, ind_start[j]])
  }
  
} else {
  for (j in 1:n_id) {
    slope_ALL[, j]  <-
      post_beta_hat[, j] * exp(post_trt_slope[, ind_start[j]] +  post_trt_theta_rand_id[, j, 2]) +  post_trt_beta_cov[, ind_start[j]]
    slope_trt[, j] <-
      post_beta_hat[, j] + post_trt_slope[, ind_start[j]]
  }
}  
 
slope_summarize <- apply(slope_ALL, 2, quantile, c(0.025, 0.5, 0.975))
slope_trt_summarize <- apply(slope_trt, 2, quantile, c(0.025, 0.5, 0.975))
post_beta_hat_summarize <- apply(post_beta_hat, 2, quantile, c(0.025, 0.5, 0.975))

slope_trt_for_summarize <- list("data" = platcov_dat_analysis_list[[model_settings$dataset[ind_res]]][ind_start,], "slope" = t(slope_trt))



data_for_plot_slope <- platcov_dat_analysis_list[[model_settings$dataset[ind_res]]][ind_start,]
data_for_plot_slope$slope_low <- slope_summarize[1,]
data_for_plot_slope$slope_med <- slope_summarize[2,]
data_for_plot_slope$slope_up <- slope_summarize[3,]
  
data_for_plot_slope$slope_trt_low <- slope_trt_summarize[1,]
data_for_plot_slope$slope_trt_med <- slope_trt_summarize[2,]
data_for_plot_slope$slope_trt_up <- slope_trt_summarize[3,]
  
data_for_plot_slope$beta_hat <- post_beta_hat_summarize[2,]
data_for_plot_slope$beta_hat_low <- post_beta_hat_summarize[1,]
data_for_plot_slope$beta_hat_up <- post_beta_hat_summarize[3,]

  
data_for_plot_slope <- data_for_plot_slope[data_for_plot_slope$beta_hat != max(data_for_plot_slope$beta_hat),] 

```

```{r}
if(model_settings$Dmax[ind_res] == 5.5){
  lab <- expression(bold(paste("Viral clearance rates, ",alpha["0-5"]," (log"["10"]," genomes mL"^-1, " day"^-1,")")));
  max <- "5d"
} else {
  lab <- expression(bold(paste("Viral clearance rates, ",alpha["0-7"]," (log"["10"]," genomes mL"^-1, " day"^-1,")")));
  max <- "7d"
}


Sp_all <- ggplot(data_for_plot_slope, aes(x = Rand_date, y = slope_med)) +
  geom_point(size = 3, alpha = 0.5, col = "grey"
             ) +
  theme_bw() +
  geom_errorbar(aes(ymin = slope_low, ymax = slope_up), width = 0,
                alpha = 0.5, col = "grey", linewidth = 0.25) +
  geom_line(aes(x = Rand_date, y = beta_hat), 
            linewidth = 1.75, alpha = 0.7, col = "red") +
  xlab("Randomisation date") +
  ylab(lab) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  theme(strip.text = element_text(size = 10, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        plot.title = element_text(size = 14, face = "bold"),
        panel.spacing = unit(1, "lines")) +
coord_cartesian(ylim=c(-3,0))

Sp_all
```

```{r}
# png(paste0("Plots/slope_by_time_", max, ".png"), width = 8, height = 6, units = "in", res = 400)
# Sp_all
# dev.off()
# 
# pdf(paste0("Plots/PDF/slope_by_time_", max, ".pdf"), width = 8, height = 6)
# Sp_all
# dev.off()
```

### Plotting trend of clearance rate by treatment

```{r}
data_for_plot_slope$Trt <- factor(
  data_for_plot_slope$Trt,
  levels = c(
    "Ivermectin",
    "Favipiravir",
    "Regeneron",
    "Remdesivir",
    "Molnupiravir",
    "Nirmatrelvir + Ritonavir",
    "No study drug"
  )
)

Trts <- unique(data_for_plot_slope$Trt)
Trts <- Trts[-which(Trts %in% c("No study drug"))]
Trts <- sort(Trts)
col <- c("#C70039", "#A03C78", "#FA7070", "#FF9130", "#1C6DD0", "#219C90")
```

```{r}
if(model_settings$Dmax[ind_res] == 5.5){
  labs <- expression(bold(paste("Viral clearance rates, ",alpha["0-5"]," (log"["10"]," genomes mL"^-1, " day"^-1,")")));
  max <- "5d"
} else {
  labs <- expression(bold(paste("Viral clearance rates, ",alpha["0-7"]," (log"["10"]," genomes mL"^-1, " day"^-1,")")));
  max <- "7d"
}


plot_list <- list()

Tags <- c("A", "B", "C", "D", "E", "F")

for(i in 1:length(Trts)){
  trt <- Trts[i]
  lab <- as.character(trt)
  if(lab == "Nirmatrelvir + Ritonavir"){lab <- "Ritonavir-boosted nirmatrelvir"}
  if(lab == "Regeneron"){lab <- "Casirivimab/imdevimab"}
  
  lab <- paste0(Tags[i], ") ", lab)
  
  G <- ggplot() +
    theme_bw() +
    geom_point(data = data_for_plot_slope[data_for_plot_slope$Trt == "No study drug", ], aes(x = Rand_date, y = slope_med),
               size = 2.5, alpha = 0.5, col = "grey") +
    geom_errorbar(data = data_for_plot_slope[data_for_plot_slope$Trt == "No study drug", ], aes(x = Rand_date, ymin = slope_low, ymax = slope_up), width = 0,
                  alpha = 0.5, col = "grey") +
    geom_line(data = data_for_plot_slope[data_for_plot_slope$Trt == "No study drug", ], aes(x = Rand_date, y = slope_trt_med), 
              linewidth = 1.25, alpha = 0.7, col = "black") +
    geom_point(data = data_for_plot_slope[data_for_plot_slope$Trt == trt, ], aes(x = Rand_date, y = slope_med),
               size = 2.5, alpha = 0.25, col = col[i]) +
    geom_errorbar(data = data_for_plot_slope[data_for_plot_slope$Trt == trt, ], aes(x = Rand_date, ymin = slope_low, ymax = slope_up), width = 0,
                  alpha = 0.25, col = col[i]) +
    geom_line(data = data_for_plot_slope[data_for_plot_slope$Trt == trt, ], aes(x = Rand_date, y = slope_trt_med), 
              linewidth = 1.25, alpha = 0.9, col = col[i]) +

    xlab("Randomisation date") +
    ylab("Viral reduction per day (log10 units)") +
    geom_hline(yintercept = 0, linetype = "dashed") +
    theme(strip.text = element_text(size = 10, face = "bold"),
          axis.title = element_blank(),
          plot.title = element_text(size = 12, face = "bold"),
          panel.spacing = unit(1, "lines")) +
    ggtitle(lab) +
coord_cartesian(ylim=c(-3,0))
  
  plot_list[[i]] <- G
}

GG <- ggarrange(plotlist = plot_list, ncol = 3, nrow = 2)
GG2 <- annotate_figure(GG, left = textGrob(labs, 
                                           rot = 90, vjust = 0.5, gp = gpar(cex = 1.1)),
                       bottom = textGrob(expression(bold("Randomisation date")), gp = gpar(cex = 1.1)))

GG2
```

```{r}
# png(paste0("Plots/slope_by_time_trt_", max, ".png"), width = 10, height = 6, units = "in", res = 350)
# GG2
# dev.off()
# 
# pdf(paste0("Plots/PDF/slope_by_time_trt_", max, ".pdf"), width = 10, height = 6)
# GG2
# dev.off()
```

```{r}

mycolors <-  c("#E41A1C", "#377EB8", "#4DAF4A", "black", "#984EA3", "#FF8400", "#2B3499", "#E95793", "#999999")
data_for_plot_slope$VariantClass_new <- factor(data_for_plot_slope$VariantClass_new, levels = vars[c(6, 1:5,8,9,7)])



data_for_plot_slope$trancate <- "No"
data_for_plot_slope$trancate[slope_to_hl(data_for_plot_slope$slope_med) > 30] <- "Yes"

G_hl_trend <- ggplot() +
  theme_bw() +
  geom_point(data = data_for_plot_slope[data_for_plot_slope$Trt %in% c("No study drug", "Ivermectin", "Remdesivir") , ], 
             aes(x = Rand_date, y = slope_to_hl(slope_med), col = VariantClass_new,
                 alpha = VariantClass_new),
             size = 2.5) +
  geom_errorbar(data = data_for_plot_slope[data_for_plot_slope$Trt %in% c("No study drug", "Ivermectin", "Remdesivir") , ],
                aes(x = Rand_date, ymin = slope_to_hl(slope_low), ymax =  slope_to_hl(slope_up), 
                    col = VariantClass_new
                    ),
                    width = 0,
                    linewidth = 0.2,
                alpha = 0.3) +
  geom_ribbon(data = data_for_plot_slope, aes(x = Rand_date, ymax = slope_to_hl(beta_hat_low), 
                                              ymin =  slope_to_hl(beta_hat_up)), fill ="black",
              alpha = 0.2) +
  geom_line(data = data_for_plot_slope, aes(x = Rand_date, y = slope_to_hl(beta_hat)), 
            linewidth = 1.5, alpha = 0.7, col = "black") +
  scale_color_manual(values = mycolors, name = "Variants") +
  scale_alpha_manual(values = rep(0.6, length(vars)), guide = "none") +
  xlab("Randomisation date") +
  ylab("Viral clearance half-life (hours)") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  theme(strip.text = element_text(size = 10, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 11),
        plot.title = element_text(size = 12, face = "bold"),
        legend.position = "bottom",
        panel.spacing = unit(1, "lines")) +
  scale_y_continuous(breaks = seq(0,30,5)) +
  coord_cartesian(ylim = c(0,30)) +
  geom_rug(data = data_for_plot_slope[data_for_plot_slope$Trt %in% c("No study drug", "Ivermectin", "Remdesivir") &
                                        data_for_plot_slope$trancate == "Yes", ],
           aes(x = Rand_date, y = slope_to_hl(slope_med), col = VariantClass_new),
           sides = "t", outside = F,
           length = unit(0.05, "npc"), linewidth = 0.8
   )
G_hl_trend
```

```{r}
# png(paste0("Plots/hl_by_time_var_", max, ".png"), width = 7, height = 6, units = "in", res = 350)
# G_hl_trend
# dev.off()
# 
# 
# pdf(paste0("Plots/PDF/hl_by_time_var_", max, ".pdf"), width = 7, height = 6)
# G_hl_trend
# dev.off()
```

### Summarizing population clearance half-life over time

```{r}
ind_tab <- slope_trt_for_summarize$data %>%
  mutate(r_number = row_number()) %>%
  group_by(Trt) %>%
  filter(Rand_date != max(Rand_date)) %>%
  summarise(min_index = r_number[which.min(Rand_date)],
            max_index = r_number[which.max(Rand_date)],
            min_date = as.character(format(min(Rand_date), "%b %Y")),
            max_date = as.character(format(max(Rand_date),  "%b %Y"))) %>%
  as.data.frame()

for(i in 1:nrow(ind_tab)){
  trt_arm <- ind_tab$Trt[i]
  slope_before <- quantile(slope_trt_for_summarize$slope[ind_tab$min_index[ind_tab$Trt == trt_arm],],
                           c(0.25, 0.5, 0.75))
  
  hl_before <- quantile(slope_to_hl( slope_trt_for_summarize$slope[ind_tab$min_index[ind_tab$Trt == trt_arm],]),
                           c(0.25, 0.5, 0.75))
  
  slope_after <- quantile(slope_trt_for_summarize$slope[ind_tab$max_index[ind_tab$Trt == trt_arm],], c(0.25, 0.5,0.75))
  
    hl_after <- quantile(slope_to_hl( slope_trt_for_summarize$slope[ind_tab$max_index[ind_tab$Trt == trt_arm],]), c(0.25, 0.5,0.75))
  
  
  relative_change <- formatter(quantile(slope_to_hl(slope_trt_for_summarize$slope[ind_tab$max_index[ind_tab$Trt == trt_arm],])/
                                       slope_to_hl(slope_trt_for_summarize$slope[ind_tab$min_index[ind_tab$Trt == trt_arm],]),
                                     c(0.025, 0.5, 0.975)))
  
  ind_tab$slope_before_low[i] <- slope_before[1]
  ind_tab$slope_before_med[i] <- slope_before[2]
  ind_tab$slope_before_up[i] <- slope_before[3]
  ind_tab$slope_after_low[i] <- slope_after[1]
  ind_tab$slope_after_med[i] <- slope_after[2]
  ind_tab$slope_after_up[i] <- slope_after[3]
  ind_tab$hl_before_low[i] <- hl_before[1] #slope_to_hl(slope_before[1])
  ind_tab$hl_before_med[i] <- hl_before[2]#slope_to_hl(slope_before[2])
  ind_tab$hl_before_up[i] <- hl_before[3] #slope_to_hl(slope_before[3])
  ind_tab$hl_after_low[i] <- hl_after[1]  #slope_to_hl(slope_after[1])
  ind_tab$hl_after_med[i] <- hl_after[2] #slope_to_hl(slope_after[2])
  ind_tab$hl_after_up[i] <- hl_after[3] #slope_to_hl(slope_after[3])
  ind_tab$relative_change_low[i] <- relative_change[1]
  ind_tab$relative_change_med[i] <- relative_change[2]
  ind_tab$relative_change_up[i] <- relative_change[3]
}
ind_tab
```

```{r}
for(i in 1:nrow(ind_tab)){
  ind_tab_i <- ind_tab[i,]
  writeLines(sprintf('%s arm:
                     Begin: %s; Viral clearance rate = %s log10 genomes per mL per day [IQR: %s to %s]
                                       Viral clearance half-life = %s h [IQR: %s to %s]
                     After: %s; Viral clearance rate = %s log10 genomes per mL per day [IQR: %s to %s]
                                       Viral clearance half-life = %s h [IQR: %s to %s]
                     Relative change = a decrease of %s%% [95%% CrI %s to %s%%] in half-life',
                ind_tab_i$Trt,
                ind_tab_i$min_date,
                round(ind_tab_i$slope_before_med,2),
                round(ind_tab_i$slope_before_low,2),
                round(ind_tab_i$slope_before_up,2),
                round(ind_tab_i$hl_before_med,1),
                round(ind_tab_i$hl_before_low,1),
                round(ind_tab_i$hl_before_up,1),
                ind_tab_i$max_date,
                round(ind_tab_i$slope_after_med,2),
                round(ind_tab_i$slope_after_low,2),
                round(ind_tab_i$slope_after_up,2),
                round(ind_tab_i$hl_after_med,1),
                round(ind_tab_i$hl_after_low,1),
                round(ind_tab_i$hl_after_up,1),
                -round(ind_tab_i$relative_change_med),
                -round(ind_tab_i$relative_change_low),
                -round(ind_tab_i$relative_change_up)
  )
  )
  
}

```

# Plot meta-analysis

```{r}
resDir <- "Rout/01_Rout_temporal_splines_analysis"
list_files <- list.files(resDir)

#dmax <- 8 #5.5 8
mod <- "Stan_models/Temporal_spline_proportional.stan" #Stan_models/Temporal_spline_mod2_w_slope_fixed_trt.stan
cov <- 2 #2
prior <- 1 #2

ind_res <- which(model_settings$mod == mod &
                 model_settings$cov_matrices == cov & model_settings$prior == prior)
```

```{r}
effect_ests <- list()

for(i in ind_res){
  load(paste0(resDir, "/", list_files[grep(paste0("fits_", i, ".RData"), list_files)]))
  platcov_dat <- platcov_dat # data_list[[model_settings$Data_ID[i]]]
  intervention = model_settings$intervention[i] # prefix of analysis file
  ref_arm = "No study drug"
  trt_intervention = unique(platcov_dat$Trt)
  trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
  effect_ests[[i]] = 
    exp(summary(out, pars='trt_effect',use_cache=F,probs=my_probs)$summary[,c('2.5%', '10%','50%','90%','97.5%'),drop=F])
  rownames(effect_ests[[i]])=trts
}

```

```{r}
effect_meta <- (do.call("rbind", effect_ests))

Trt_meta <- row.names(effect_meta)
effect_meta <- data.frame(effect_meta, Trt_meta)
colnames(effect_meta) <- c("L95", "L80", "med", "U80", "U95", "Trt")

effect_meta$Dmax <- rep(model_settings$Dmax[ind_res], each = length(unique(Trt_meta)))
effect_meta$Dmax <- as.factor(effect_meta$Dmax)
levels(effect_meta$Dmax) <- c("5 days", "7 days")

row.names(effect_meta) <- NULL

effect_meta$Trt <- as.factor(effect_meta$Trt)
effect_meta$Trt <- factor(effect_meta$Trt, levels = c("Ivermectin", "Favipiravir", "Regeneron",
                                                      "Molnupiravir", "Remdesivir", "Nirmatrelvir + Ritonavir"))
levels(effect_meta$Trt)[3] <- "Casirivimab/Imdevimab"
levels(effect_meta$Trt)[6] <- "Nirmatrelvir"


my.labels <- levels(effect_meta$Trt)
my.labels[3] <- "Casirivimab/\nImdevimab"

G4 <- ggplot(effect_meta, aes(x = Trt, y = med, col = Dmax)) +
  geom_point(position = position_dodge(width = 0.5), size = 3) +
  geom_rect(aes(ymin = 0.6, ymax = 1.2, xmin = 0, xmax = 7), fill = "gray", alpha = 0.05, col = NA) +
  theme_bw() +
  coord_flip() +
  geom_errorbar(aes(ymin = L95, ymax = U95), width = 0, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(x = Trt, ymin = L80, ymax = U80),position = position_dodge(width = 0.5), width = 0, linewidth = 1) +
  geom_point(position = position_dodge(width = 0.5), size = 3) +
  geom_hline(yintercept = 1, col = "red", linetype = "dashed") +
  scale_color_manual(values = c("#BB2525", "#191D88"), name = "Follow-up duration") +
  scale_shape_manual(values = c(16,17), name = "Model", guide = "none") +
  scale_y_continuous(labels = formatter, limits = c(0.6, 2.8), expand = c(0,0),
                     breaks = seq(0.8,2.8,0.2)) +
  ylab("Change in rate of viral clearance (%)") +
  xlab("") + 
  theme(axis.title  = element_text(face = "bold"),
        plot.title = element_text(face = "bold"),
        legend.position = "bottom",
        plot.margin = margin(0.2,0.5,0,0, unit = "cm")) +
  scale_x_discrete(labels = my.labels)
G4
```

```{r}
estimated_trt_eff <- data.frame(round(formatter(effect_meta[,1:5])), effect_meta[,-(1:5)])
estimated_trt_eff
```

```{r}
# png("Plots/Meta_analysis.png", width = 6, height = 5, units = "in", res = 350)
# G4
# dev.off()

pdf("Plots/PDF/Meta_analysis.pdf", width = 6, height = 5)
G4
dev.off()
```

# Plot covariate effects on slope and intercept

```{r}
ind_res <- which(model_settings$mod == mod &
                 model_settings$cov_matrices == 2 & model_settings$prior == 1 & model_settings$Dmax == 8)

#Extract slope coefficients
slope_coefs <- rstan::extract(out, "slope_coefs")
slope_coefs_summary <- as.data.frame(t(apply(slope_coefs$slope_coefs, 2, quantile, c(0.025, 0.5, 0.975))))
colnames(slope_coefs_summary) <- c("Low", "Med", "Up")

#Extract intercept coefficients
intercept_coefs <- rstan::extract(out, "intercept_coefs")
intercept_coefs_summary <- as.data.frame(t(apply(intercept_coefs$intercept_coefs, 2, quantile, c(0.025, 0.5, 0.975))))
colnames(intercept_coefs_summary) <- c("Low", "Med", "Up")

#Extract covariate names
cov_names <- colnames(stan_inputs[[model_settings$dataset[ind_res]]]$cov_matrices$X_slope[[cov]])

slope_coefs_summary$cov <- cov_names
intercept_coefs_summary$cov <- cov_names

slope_coefs_summary$type <- "Slope"
intercept_coefs_summary$type <- "Intercept"

coefs_summary <- rbind(slope_coefs_summary, intercept_coefs_summary)
coefs_summary <- coefs_summary[-grep("Site", coefs_summary$cov), ]

coefs_summary$cov <- as.factor(coefs_summary$cov)
```

```{r}
#Back transforming age effects (from SD-wise to 10-year-wise)
sd_age <- platcov_dat_analysis_list[[model_settings$dataset[[ind_res]]]]$SD_age[1]

coefs_summary[coefs_summary$cov == "Age_scaled",]
coefs_summary[coefs_summary$cov == "Age_scaled",1:3] <- coefs_summary[coefs_summary$cov == "Age_scaled",1:3] * 10 /sd_age

levels(coefs_summary$cov) <- c("Increased age \nof 10 years", "1 additional \nvaccine dose", "Male", "1 additional day \nsince symptom onset")

#Exponentiate coefficient for slope
coefs_summary[coefs_summary$type == "Slope", 1:3] <- formatter(exp(coefs_summary[coefs_summary$type == "Slope", 1:3]))

#Exponentiate coefficient for intercept
coefs_summary[coefs_summary$type == "Intercept", 1:3] <- formatter(10^(coefs_summary[coefs_summary$type == "Intercept", 1:3]))
```

```{r}
G_cov1 <- ggplot(coefs_summary[coefs_summary$type == "Slope",]) +
  geom_point(aes(x = cov, y = Med), size = 3.5, alpha = 0.75, col = "#1D2B53") +
  geom_errorbar(aes(x = cov, ymin = Low, ymax = Up), width = 0, alpha = 0.75, linewidth = 1, col = "#1D2B53") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  #facet_wrap(.~type) +
  ggtitle("B) Effects on viral clearance rate") +
  coord_flip() +
  theme_bw() +
  xlab("") +
  ylab("Change in viral clearance rate (%)") +
  theme(strip.text = element_text(size = 10, face = "bold"),
        axis.title = element_text(size = 10, face = "bold"),
        plot.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10),
        legend.position = "bottom",
        panel.spacing = unit(1, "lines")) +
  ylim(-12, 12)
G_cov1

```

```{r}
G_cov2 <- ggplot(coefs_summary[coefs_summary$type == "Intercept",]) +
  geom_point(aes(x = cov, y = Med), size = 3.5, alpha = 0.75, col = "#1D2B53") +
  geom_errorbar(aes(x = cov, ymin = Low, ymax = Up), width = 0, alpha = 0.75, linewidth = 1, col = "#1D2B53") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  #facet_wrap(.~type) +
  ggtitle("A) Effects on baseline viral density") +
  coord_flip() +
  theme_bw() +
  xlab("") +
  ylab("Change in baseline viral density (%)") +
  theme(strip.text = element_text(size = 10, face = "bold"),
        axis.title = element_text(size = 10, face = "bold"),
        plot.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10),
        legend.position = "bottom",
        panel.spacing = unit(1, "lines")) +
  ylim(-120, 120)
G_cov2
```

```{r}
# png("Plots/Covariates.png", width = 10, height = 4, units = "in", res = 350)
# ggarrange(G_cov2, G_cov1)
# dev.off()

pdf("Plots/PDF/Covariates.pdf", width = 10, height = 4)
ggarrange(G_cov2, G_cov1)
dev.off()
```

# Plot randomization date

```{r}
timeline_data <- platcov_dat[platcov_dat$mITT,]

timeline_data <- unique(timeline_data[,c("ID", "Trt",  "Rand_date")])

timeline_data$Trt <- factor(timeline_data$Trt, levels = c("No study drug", "Ivermectin", "Favipiravir", "Regeneron","Molnupiravir", "Remdesivir", "Nirmatrelvir + Ritonavir"))

levels(timeline_data$Trt)[4] <- "Casirivimab/Imdevimab"
levels(timeline_data$Trt)[7] <- "Nirmatrelvir"

start_year <- as.Date("2022-01-01")
end_year <- as.Date("2024-01-01")

timeline_data$Rand_date <- as.Date(timeline_data$Rand_date)

G_timeline <- ggplot(data = timeline_data, aes(x=Rand_date, y = Trt)) +
  geom_point(size = 3.5, alpha = 0.4, col = "#424769") +
  theme_bw() +
  xlab("") +
  ylab("") +
  geom_vline(xintercept = seq.Date(start_year, end_year, "12 months"),
             col = "red", linetype = "dashed") +
  scale_x_date(date_labels =  "%b %y", breaks = seq.Date(as.Date("2021-01-01"), end_year, "4 months"))+
  theme(axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        axis.text = ggtext::element_markdown(size = 12),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        legend.text=element_text(size=10),
        plot.title = element_text(size = 15, face = "bold"),
        legend.position='bottom') +
   scale_y_discrete(drop = F)
G_timeline
```

```{r}
# png("Plots/FigSx_timeline.png", width = 8, height = 5, units = "in", res = 350)
# G_timeline
# dev.off()

pdf("Plots/PDF/FigSx_timeline.pdf", width = 8, height = 5)
G_timeline
dev.off()
```

# Leave-one-out analysis

```{r}
resDir <- "Rout/01_Rout_temporal_splines_analysis"
list_files <- list.files(resDir)

dmax <- 8 #5.5 8
#mod <- "Stan_models/Temporal_spline_mod2_w_slope.stan" #Stan_models/Temporal_spline_mod2_w_slope_fixed_trt.stan
cov <- 2 #2
prior <- 1 #2

ind_res <- which(model_settings$Dmax == dmax &
                 model_settings$cov_matrices == cov & model_settings$prior == prior)

model_list = list()
num <- as.numeric(str_extract(str_extract(ff, "fits_[0-9]+"), "[0-9]+"))

for(i in 1:length(ind_res)){
  load(ff[which(num == ind_res[i])])
  model_list[[i]] = out
}
```

```{r}
#Proportional change
log_lik_1 <- extract_log_lik(model_list[[1]], merge_chains = FALSE)
r_eff <- relative_eff(exp(log_lik_1), cores = 2) 
loo_1 <- loo(log_lik_1, r_eff = r_eff, cores = 2)
print(loo_1)
```

```{r}
#Additive change
log_lik_2 <- extract_log_lik(model_list[[2]], merge_chains = FALSE)
r_eff_2 <- relative_eff(exp(log_lik_2), cores = 2) 
loo_2 <- loo(log_lik_2, r_eff = r_eff_2, cores = 2)
print(loo_2)
```

```{r}
comp <- loo_compare(loo_1, loo_2)
print(comp)
```

# Variants and Treatment effect heterogeneity

```{r}
resDir <- "Rout/01_Rout_temporal_splines_analysis_variants" # "Rout/01_Rout_temporal_splines_analysis_variants" 
list_files <- list.files(resDir)

dmax <- 8 #5.5 8
mod <- "Stan_models/Temporal_spline_proportional.stan" # "Stan_models
cov <- 2 #2
prior <- 1 #2

ind_res <- which(model_settings$Dmax == dmax & model_settings$mod == mod &
                   model_settings$cov_matrices == cov & model_settings$prior == prior)

load(paste0(resDir, "/", list_files[grep(paste0("fits_", ind_res, ".RData"), list_files)])) 
```

```{r}
trt_effect <- rstan::extract(out, "trt_effect")$trt_effect
Trt_matrix <- stan_inputs[[model_settings$dataset[ind_res]]]$Trt_matrix
effect_names <- colnames(Trt_matrix)[-1]

ind_nodata <- as.data.frame(table(Baseline_data$VariantClass_new, Baseline_data$Trt))
colnames(ind_nodata) <- c("Variant", "Treatment", "Freq")
ind_nodata$Available <- ind_nodata$Freq > 0
ind_nodata$Treatment <- as.factor(ind_nodata$Treatment)
levels(ind_nodata$Treatment) <- gsub(' [A-z+]*',"",levels(ind_nodata$Treatment))
ind_nodata$Variant <- as.factor(ind_nodata$Variant)
ind_nodata$lab <- paste0("n = ", ind_nodata$Freq)

colnames(trt_effect) <- effect_names
ref_variant <- "BA.1"
Trt_list <- which(grepl("Trt", effect_names) & !grepl("VariantClass_new", effect_names))
Trts <- sub("Trt", "", effect_names[Trt_list])
Trts[grep("Nirmatrelvir", Trts)] <- "Nirmatrelvir"
```

```{r}
trt_effect_summarize <- NULL
for(i in 1:length(Trts)){
  subdat <-  trt_effect[,grep(Trts[i], effect_names)]
  sum_dat <- subdat[,grepl("VariantClass_new", colnames(subdat))] +  subdat[,!grepl("VariantClass_new", colnames(subdat))]
  sum_dat <- cbind(subdat[,!grepl("VariantClass_new", colnames(subdat))], sum_dat)
  colnames(sum_dat)[1] <- paste0("Trt", Trts[i],":VariantClass_new",ref_variant)
  trt_effect_summarize <- cbind(trt_effect_summarize, sum_dat)
}
```

```{r}
effect_names2 <- colnames(trt_effect_summarize)

trt_effect_summarize <- as.data.frame(t(apply(trt_effect_summarize,2,quantile, c(0.025, 0.5, 0.975))))
colnames(trt_effect_summarize) <- c("Low", "Med", "Up")
trt_effect_summarize$predictors <- effect_names2
rownames(trt_effect_summarize) <- NULL

trt_effect_summarize_int <- trt_effect_summarize[grep(":", trt_effect_summarize$predictors),]
trt_effect_summarize_int$Trt <-  sapply(strsplit(trt_effect_summarize_int$predictors, ":"), "[", 1)
trt_effect_summarize_int$Variant <-  sapply(strsplit(trt_effect_summarize_int$predictors, ":"), "[", 2)

trt_effect_summarize_int$Trt <- gsub("Trt", "", trt_effect_summarize_int$Trt)
trt_effect_summarize_int$Variant <- gsub("VariantClass_new", "", trt_effect_summarize_int$Variant)

trt_effect_summarize_int$Trt <- as.factor(trt_effect_summarize_int$Trt)
levels(trt_effect_summarize_int$Trt) <- gsub(' [A-z+]*',"",levels(trt_effect_summarize_int$Trt))

trt_effect_summarize_int <- merge(trt_effect_summarize_int, ind_nodata, by.x = c("Trt", "Variant"), by.y = c("Treatment", "Variant"))
levels(trt_effect_summarize_int$Trt)[5] <- "Casirivimab/imdevimab"
levels(trt_effect_summarize_int$Trt)[4] <- "Ritonavir-boosted nirmatrelvir"
 
trt_effect_summarize_int$Variant <- as.factor(trt_effect_summarize_int$Variant)
trt_effect_summarize_int$Variant <- factor(trt_effect_summarize_int$Variant, 
                                                 levels = rev(c("Delta", "BA.1",  "BA.2" ,"BA.2.75" , "BA.4"  , 
                                                          "BA.5"   , "XBB"  , "XBB.1.5-like",  "Other" )))
trt_effect_summarize_int$Med_percent <- formatter(exp(trt_effect_summarize_int$Med))
trt_effect_summarize_int$Low_percent <- formatter(exp(trt_effect_summarize_int$Low))
trt_effect_summarize_int$Up_percent <- formatter(exp(trt_effect_summarize_int$Up))
```

```{r}
G_variants <- ggplot(trt_effect_summarize_int[trt_effect_summarize_int$Available,],
        aes(y = Variant)) +
  geom_point(aes(x = Med_percent), size = 2.5, alpha = 0.75, col = "#1D2B53") +
  geom_errorbar(aes(xmin = Low_percent, xmax = Up_percent), width = 0, linewidth = 1, alpha = 0.75, col = "#1D2B53") +
  facet_wrap(.~ Trt) +
  theme_bw() +
  geom_vline(xintercept = 0, linetype = "dashed", col = "red") +
  xlab("Change in viral clearance rate (%)") +
  ylab("") +
  theme(strip.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        plot.title = element_text(size = 14, face = "bold"),
        axis.text = element_text(size = 10),
        panel.spacing = unit(1, "lines")) +
  geom_text(aes(y = Variant, label = lab), x = -200, hjust  = 0, size = 4) +
  coord_cartesian(xlim=c(-200, 410))
G_variants
```

```{r}
png("Plots/variant_effects.png", width = 10, height = 6, units = "in", res = 350)
G_variants
dev.off()

pdf("Plots/PDF/variant_effects.pdf", width = 10, height = 6)
G_variants
dev.off()
```

---
title: "Temporal splines PLATCOV"
author: "James Watson and Phrutsamon Wongnak"
format: pdf
editor: visual
---

```{r}
knitr::opts_chunk$set(cache = T, cache.comments = FALSE,
                      echo = F, include = TRUE, 
                      fig.width = 8, fig.height = 8,
                      fig.pos = 'H',dev = 'png', dpi = 300)

```

```{r}
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(mgcv)
library(tidymv)
library(splines)
library(scales)
library(ggnewscale)


## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = c(5.5, 8)
study_threshold = 1.2
RUN_MODELS = F

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
```

## Load data

Set up analysis

```{r}
intervention = 'Unblinded_meta' # prefix of analysis file
ref_arm = 'No study drug'
```

```{r load_data}
#| echo: false
# set as file with relevant dataset
itt_population_all = read.csv('Analysis_Data/ITT_population.csv')

f_name = paste0("Analysis_Data/", intervention,'_analysis.csv')
platcov_dat = read.csv(f_name)
platcov_dat$Rand_date = as.POSIXct(platcov_dat$Rand_date)
trt_intervention = unique(platcov_dat$Trt)

if(!all(platcov_dat$ID %in% itt_population_all$ID)) stop('IDs do not match ITT population')

writeLines(sprintf('Missing patients in %s arm:',trt_intervention))
ind = itt_population_all$Treatment%in%trt_intervention &
  !itt_population_all$ID %in% platcov_dat$ID

itt_population_all$ID[ind]
itt_population_all$Treatment[ind]
# interventions
if(length(trt_intervention)==0) stop('no interventions!')
trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
```

## Make modified intention to treat population

```{r make_analysis_data}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID) %>%
  mutate(
    mITT = any(Per_protocol_sample==1 & Timepoint_ID>=3) &
      !all(CT_NS==40))

pop_table = platcov_dat %>% distinct(ID, .keep_all = T)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT)
```

```{r}
platcov_dat$VariantClass_new <- as.character(platcov_dat$Variant)
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("BA.5.2", "BA.5.5", "BQ.1")] <- "BA.5"
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("BN.1.2", "BN.1.3", "CH.1.1")] <- "BA.2.75"
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("XBB1.5-like with F456L")] <- "XBB.1.5-like"
platcov_dat$VariantClass_new <- as.factor(platcov_dat$VariantClass_new)
```

## Baseline characteristics

```{r}
#| echo: false
platcov_dat = platcov_dat %>% ungroup() %>%
  mutate(Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
        Study_time_normal = Study_time,
         Study_time = scale(Study_time) ) %>%
  group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         Sex = as.factor(ifelse(Sex==1,'Male','Female')),
         Site = as.factor(Site),
         Trt = factor(Trt, levels=c(ref_arm, trts)),
         Vaccinated = as.factor(ifelse(N_dose>0,'Yes','No')),
         Variant = as.factor(Variant)#normalise
         )  %>%
  ungroup() %>%
  mutate(trt_color = brewer.pal(name = 'Dark2',8)[c(1,7)][as.numeric(Trt)]) 

Baseline_data = platcov_dat %>% ungroup() %>% 
  distinct(ID, .keep_all = T) %>%
  filter(Timepoint_ID==0) %>% 
  mutate(Baseline.viral.load = daily_VL)


tab.ff <- Baseline_data %>% filter(mITT) %>%
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'Sex','BMI', "Weight", "Baseline.viral.load", 
                    "VariantClass_new",'Symptom_onset','Vaccinated','Fever_Baseline'),
    total_col = T, # add column with statistics for the whole sample
    add_row_total = F, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics in mITT population",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
```

## Fit models

```{r}
#| echo: false
source('priors.R')

covs_base = c('Site') #'Study_time'
covs_full=c(covs_base, 'Age_scaled','Symptom_onset','N_dose')

# Analysis data
platcov_dat_analysis_list = list()
stan_inputs = list()

for(i in 1:length(Dmax)){
  platcov_dat_analysis_list[[i]] = 
  platcov_dat %>% ungroup() %>%
  filter(Time <= Dmax[i], mITT) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 
  
writeLines(sprintf('Analysis dataset for follow-up duration of %s days contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   max(floor(platcov_dat_analysis_list[[i]]$Time)),
                   length(unique(platcov_dat_analysis_list[[i]]$ID)),
                   nrow(platcov_dat_analysis_list[[i]]),
                   sum(platcov_dat_analysis_list[[i]]$CT_NS<40),
                   round(100*mean(platcov_dat_analysis_list[[i]]$CT_NS<40))))

stan_inputs[[i]] = 
  make_stan_inputs(input_data_fit = platcov_dat_analysis_list[[i]],
                   int_covs_base = covs_base,
                   int_covs_full = covs_full,
                   slope_covs_base = covs_base,
                   slope_covs_full = covs_full,
                   trt_frmla = formula('~ Trt'),
                   Dmax = Dmax[i])
  
}
```

```{r setup_models}
all_mods = c("Stan_models/Temporal_spline_mod2_w_slope.stan",
             "Stan_models/Temporal_spline_mod2_w_slope_fixed_trt.stan")

model_settings = expand.grid(mod = all_mods,
                             prior = 1:2,
                             cov_matrices = 1:2, 
                             dataset = 1:2,
                             Dmax = Dmax,
                             num_knots_alpha = 10,
                             spline_degree_alpha = 4,
                             num_knots_beta = 10,
                             spline_degree_beta = 4)

model_settings$Niter = 4000
model_settings$Nwarmup = 2000
model_settings$Nthin = 4
model_settings$Nchain = 4

model_settings$intervention <- intervention

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')
save(model_settings, 
     platcov_dat_analysis_list,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

```{r}
if(RUN_MODELS){
  system(paste('Rscript --vanilla run_models_local.R',intervention))
}
```

```{r}
ff = list.files('Rout/', pattern = intervention)
ff = ff[grep(pattern = 'model_fits_',x = ff)]
if(!length(ff)==nrow(model_settings)) stop('not all outputs are ready for all model settings')
ff = paste0('Rout/',ff)
```

main model selection

```{r}
main_mod = which(model_settings$prior==1&
                   model_settings$cov_matrices==1&
                   model_settings$mod==all_mods[1])

model_cols = brewer.pal(n = nrow(model_settings), name = 'Set1')
names(model_cols) = paste('model', 1:nrow(model_settings))
```

# 

# Baseline viral load dynamics

```{r}
back_transfrom_date <- function(platcov_dat, scaled_time){
  mean_time <- mean(platcov_dat$Study_time_normal)
  sd_time <- sd(platcov_dat$Study_time_normal)
  min_date <- as.numeric(min(as.Date(platcov_dat$Rand_date)))
  backward_time <- (scaled_time * sd_time) + mean_time
  date <- as.POSIXct.Date(backward_time * 7 + min_date)
  return(date)
}
```

### GAM mod 1: Baseline viral loads vs Time

```{r}
Baseline_vl_data_Plot <- Baseline_data[Baseline_data$mITT,]
vars <- levels(Baseline_vl_data_Plot$VariantClass_new)

Baseline_vl_data_Plot$VariantClass_new <- factor(Baseline_vl_data_Plot$VariantClass_new, levels = vars[c(6, 1:5,8,9,7)])

mod1 <- gam(Baseline.viral.load ~ s(Study_time), 
                      data = Baseline_vl_data_Plot) 
pred_mod1 <- predict_gam(mod1)
pred_mod1$Rand_date <-  back_transfrom_date(platcov_dat, pred_mod1$Study_time)

mycolors <-  c("#E41A1C", "#377EB8", "#4DAF4A", "black", "#984EA3", "#FF8400", "#2B3499", "#E95793", "#999999")


Gr_mod1 <- pred_mod1 %>%
  ggplot(aes(Rand_date, fit)) +
  geom_point(data = Baseline_vl_data_Plot, aes(x = Rand_date, y = Baseline.viral.load, col = VariantClass_new, alpha = VariantClass_new, shape = VariantClass_new),
             size = 2.5) +
  geom_smooth_ci(linewidth = 1.5, col = "black", ci_alpha = 0.25) +
  theme_bw() +
  xlab("Randomisation date") +
  ylab("Time since symptomp onset (days)") +
  theme(strip.text = element_text(size = 10, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        plot.title = element_text(size = 14, face = "bold"),
        panel.spacing = unit(1, "lines"),
        legend.position = "bottom") +
    scale_color_manual(values = mycolors, name = "Variants") +
    scale_y_continuous(labels=label_math(), breaks = seq(0,9,1)) +
  xlab("Randomisation date") +
  ylab("Baseline SARS-CoV-2 genomes/mL") +
  scale_alpha_manual(values = rep(0.6, length(vars)), guide = "none") +
  scale_shape_manual(values = rep(19, length(vars)), name = "Variants") +
   guides(col=guide_legend(nrow=2),
         shape = guide_legend(override.aes = list(size = 4)))

print(Gr_mod1)

```

```{r}
png("Plots/Figx_baseline_viral_loads.png", width = 8, height = 6, units = "in", res = 400)
Gr_mod1
dev.off()
```

### GAM mod 2: Symptom onset vs Baseline viral loads

```{r}
Baseline_vl_data_Plot <- Baseline_data[Baseline_data$mITT,]
#Impute
Baseline_vl_data_Plot$Symptom_onset[is.na(Baseline_vl_data_Plot$Symptom_onset)] <- 2
Baseline_vl_data_Plot$Symptom_onset[(Baseline_vl_data_Plot$Symptom_onset) == 0] <- 1

Baseline_vl_data_Plot$Symptom_onset_round <- ceiling(Baseline_vl_data_Plot$Symptom_onset)

Baseline_vl_data_Plot$Symptom_onset_round_factor <- as.factor(Baseline_vl_data_Plot$Symptom_onset_round)

mod2 <- gam(Baseline.viral.load ~ s(Symptom_onset_round, k=4), 
            data = Baseline_vl_data_Plot) 

pred_mod2 <- predict_gam(mod2)

Gr_mod2 <- pred_mod2 %>%
  ggplot(aes(Symptom_onset_round, fit)) +
   geom_jitter(data = Baseline_vl_data_Plot, aes(x = Symptom_onset_round_factor, y = Baseline.viral.load),
                size = 2, alpha = 0.5, width = 0.3, col = "#435585") +
  
  geom_violin(data = Baseline_vl_data_Plot, aes(x = Symptom_onset_round_factor, y = Baseline.viral.load),
              trim=T, fill='#8CC0DE', linewidth = 0.75, width = 0.75, alpha = 0.5) +
  geom_boxplot(data = Baseline_vl_data_Plot, aes(x = Symptom_onset_round_factor, y = Baseline.viral.load),
               width=0.1, size = 0.75,outlier.shape = NA,  coef = 0, alpha = 0.5) +
  geom_smooth_ci(linewidth = 1.5, col = "#D80032", ci_alpha = 0.25) +
  theme_bw() +
  xlab("Time since symptom onset (days)") +
  ylab("Baseline SARS-CoV-2 genomes/mL") +
  theme(axis.title = element_text(size = 10, face = "bold"),
        axis.text = element_text(size = 8)) +
  scale_y_continuous(labels=label_math(), breaks = seq(0,9,2))

Gr_mod2

writeLines(sprintf('R-squared = %s',
                   round(summary(mod2)$r.sq,4)))
```

### GAM mod 3: Symptom onset vs time

```{r}
Baseline_vl_data_Plot <- Baseline_data[Baseline_data$mITT,]
#Impute
Baseline_vl_data_Plot$Symptom_onset[is.na(Baseline_vl_data_Plot$Symptom_onset)] <- 2
Baseline_vl_data_Plot$Symptom_onset[(Baseline_vl_data_Plot$Symptom_onset) == 0] <- 1

Baseline_vl_data_Plot$Symptom_onset_round <- ceiling(Baseline_vl_data_Plot$Symptom_onset)

Baseline_vl_data_Plot$Symptom_onset_round_factor <- as.factor(Baseline_vl_data_Plot$Symptom_onset_round)


mod3 <- gam(Symptom_onset_round ~ s(Study_time), 
                      data = Baseline_vl_data_Plot) 

pred_mod3 <- predict_gam(mod3)


pred_mod3$Rand_date <-  back_transfrom_date(platcov_dat, pred_mod3$Study_time)

omicron_date <- min(Baseline_vl_data_Plot$Rand_date[Baseline_vl_data_Plot$VariantClass_new == "BA.1"])
omicron_date_2 <- max(Baseline_vl_data_Plot$Rand_date[Baseline_vl_data_Plot$VariantClass_new == "BA.1"])

Gr_mod3 <- pred_mod3 %>%
  ggplot(aes(Rand_date, fit)) +
  geom_vline(xintercept = omicron_date, linetype = "dashed", linewidth = 0.75) +
  geom_point(data = Baseline_vl_data_Plot, aes(x = Rand_date, y = Symptom_onset_round),
             size = 2, alpha = 0.3, col = "#435585") +
  geom_smooth_ci(linewidth = 1.5, col = "#D80032", ci_alpha = 0.25) +
  theme_bw() +
  xlab("Randomisation date") +
  ylab("Time since symptomp onset (days)") +
  theme(axis.title = element_text(size = 10, face = "bold"),
        axis.text = element_text(size = 8)) 

Gr_mod3
```

### GAM mod 4: Baseline viral loads vs time by symptom onset

```{r}
Baseline_vl_data_Plot <- Baseline_data[Baseline_data$mITT,]
#Impute
Baseline_vl_data_Plot$Symptom_onset[is.na(Baseline_vl_data_Plot$Symptom_onset)] <- 2
Baseline_vl_data_Plot$Symptom_onset[(Baseline_vl_data_Plot$Symptom_onset) == 0] <- 1

Baseline_vl_data_Plot$Symptom_onset_round <- ceiling(Baseline_vl_data_Plot$Symptom_onset)

Baseline_vl_data_Plot$Symptom_onset_round_factor <- as.factor(Baseline_vl_data_Plot$Symptom_onset_round)

vars <- levels(Baseline_vl_data_Plot$VariantClass_new)

Baseline_vl_data_Plot$VariantClass_new <- factor(Baseline_vl_data_Plot$VariantClass_new, levels = vars[c(6, 1:5,8,9,7)])


mod4 <- gam(Baseline.viral.load ~ s(Symptom_onset_round, k=4) + 
                                  s(Study_time) +
                                  s(Study_time, by = Symptom_onset_round), 
                                  data = Baseline_vl_data_Plot) 

pred_mod4 <- predict_gam(mod4, values = list(Symptom_onset_round = c(1,2,3,4)))
pred_mod4$Rand_date <-  back_transfrom_date(platcov_dat, preds$Study_time)

pred_mod4$Symptom_onset_round <- as.factor(pred_mod4$Symptom_onset_round)
levels(pred_mod4$Symptom_onset_round)  <- c("1 day", "2 days", "3 days", "4 days")

Baseline_vl_data_Plot$Symptom_onset_round <- as.factor(Baseline_vl_data_Plot$Symptom_onset_round)
levels(Baseline_vl_data_Plot$Symptom_onset_round)  <- c("1 day", "2 days", "3 days", "4 days")

mycolors <-  c("#E41A1C", "#377EB8", "#4DAF4A", "black", "#984EA3", "#FF8400", "#2B3499", "#E95793", "#999999")


Gr_mod4 <-pred_mod4 %>%
  ggplot(aes(Rand_date, fit)) +
  geom_point(data = Baseline_vl_data_Plot, 
             aes(x = Rand_date, y = Baseline.viral.load, col = VariantClass_new, alpha = VariantClass_new),
             size = 2) +
  scale_color_manual(values = mycolors, name = "Variants") +
  facet_wrap(.~ Symptom_onset_round, ncol = 4) +
  guides(col = guide_legend(override.aes = list(size = 4))) +
  ggnewscale::new_scale_color() +
  geom_smooth_ci(Symptom_onset_round,  linewidth = 1, col = "black", ci_alpha = 0.25) +
  scale_linetype_manual(values = rep("solid",5), guide = "none") +
  theme_bw() +
  xlab("Randomisation date") +
  ylab("Baseline SARS-CoV-2 genomes/mL") +
  theme(axis.title = element_text(size = 10, face = "bold"),
        axis.text = element_text(size = 8),
        legend.position = "bottom",
        strip.text = element_text(size = 8),
        plot.title = element_text(size = 11, face = "bold")) +
  scale_alpha_manual(values = rep(0.6, length(vars)), guide = "none") +
  ggtitle("Temporal dynamics of baseline viral loads by time since symptom onset") +
  scale_y_continuous(labels=label_math(), breaks = seq(0,9,2)) 

Gr_mod4
```

```{r}
Gr_mgcv <- ggarrange(ggarrange(Gr_mod2, NULL, Gr_mod3, ncol = 3, labels = c("A","", "B"), align = "hv", widths = c(1,0.05,1)),
               NULL,
               Gr_mod4,
               nrow = 3, labels = c("", "", "C"), heights = c(1, 0.1, 1.2)
)

Gr_mgcv
```

```{r}
png("Plots/Figx_onset_dynamics_all.png", width = 10, height = 8, units = "in", res = 350)
print(Gr_mgcv)
dev.off()
```

# Plot dynamics before vs after

```{r}
plot_dat <- platcov_dat %>%
  filter(mITT, Timepoint_ID != 8)

plot_dat$Epoch_2 <- "Jul 2022 to Dec 22"
plot_dat$Epoch_2[plot_dat$Rand_date >= as.Date("2023-01-01")] <- "After Jan 2023"
plot_dat$Epoch_2[plot_dat$Rand_date < as.Date("2022-07-01")] <- "Before Jul 2022"

plot_dat$Epoch_2 <- as.factor(plot_dat$Epoch_2)
plot_dat$Epoch_2 <- factor(plot_dat$Epoch_2, levels = c("Before Jul 2022", "Jul 2022 to Dec 22", "After Jan 2023"))

plot_dat <- plot_dat %>%
  group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load))

plot_dat_daily <- unique(plot_dat[,c("ID", "Trt", "Timepoint_ID", "Epoch_2", "daily_VL")])

plot_dat_daily <- plot_dat_daily %>% filter(Trt == "No study drug")

med_data <- plot_dat_daily %>%
  group_by(Epoch_2, Timepoint_ID) %>%
  summarise(daily_VL = median(daily_VL))

Gr_dynamics <- ggplot() +
  geom_jitter(data = plot_dat_daily, aes(x = Timepoint_ID, y = daily_VL,
                                         col = Epoch_2), alpha = 0.3, width = 0.15,
              shape = 21, size = 2) +
  geom_line(data = med_data %>% filter(Timepoint_ID <=7), aes(x = Timepoint_ID, y = daily_VL,
                                         col = Epoch_2), linewidth = 1) +
  
  geom_line(data = med_data %>% filter(Timepoint_ID >=7), aes(x = Timepoint_ID, y = daily_VL,
                                         col = Epoch_2), linewidth = 0.75, linetype = "dashed") +
  
  geom_point(data = med_data, aes(x = Timepoint_ID, y = daily_VL,
                                         fill = Epoch_2), size = 3.5, shape = 24) +
  theme_bw() +
  scale_fill_manual(values = c("#005AB5",  "#F99417", "#DC3220"), name = "") +
  scale_colour_manual(values = c("#005AB5",  "#F99417", "#DC3220"), name = "") +
  scale_x_continuous(breaks = 0:14) +
  scale_y_continuous(labels=label_math(), breaks = seq(0,8,2)) +
  xlab("Time since randomisation (days)") +
  ylab("SARS-CoV-2 genomes/mL") + 
  theme(axis.title  = element_text(face = "bold"),
        plot.title = element_text(face = "bold"),
        legend.position = "bottom",
        axis.text = element_text(size = 10)) +
  ggtitle("No-study-drug arm")
Gr_dynamics
```

```{r}
png("Plots/Figx_dynamics_before_after.png", width = 6, height = 5, units = "in", res = 350)
Gr_dynamics
dev.off()
```

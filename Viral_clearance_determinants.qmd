---
title: "Determinants of viral clearance in PLATCOV"
author: "James Watson"
format: html
editor: visual
---

```{r preambule}
knitr::opts_chunk$set(cache = F, cache.comments = FALSE,
                      echo = F, include = TRUE, 
                      fig.width = 8, fig.height = 8,
                      fig.pos = 'H',dev = 'png', dpi = 300)

```

```{r setup}
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(lme4)
library(survival)
library(survminer)
library(gridExtra)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = 8
RUN_MODELS = F
add_epoch = T # if using non-concurrent controls

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
trt_colors = get_trt_colors()
```

## *Load data*

*Set up analysis*

```{r load_data}
intervention = 'interim_all' # prefix of analysis file
ref_arm = 'No study drug'
study_threshold = 1.2 # depending on comparison with no study drug or positive control
```

```{r define_population}
#| echo: false
# set as file with relevant dataset
itt_population_all = get_itt_population()

f_name = paste0('Analysis_Data/',intervention,'_analysis.csv')
platcov_dat = read.csv(f_name)
platcov_dat$Trt[platcov_dat$Trt=='Nirmatrelvir + Ritonavir']='Nirmatrelvir'

platcov_dat = platcov_dat %>% filter(!Trt %in% c('Ensitrelvir','Nitazoxanide'),
                                     !Swab_ID %in% c('No location','Saliva'))
platcov_dat$Rand_date = as.POSIXct(platcov_dat$Rand_date)
trt_intervention = unique(platcov_dat$Trt)

if(!all(platcov_dat$ID %in% itt_population_all$ID)) stop('IDs do not match ITT population')

for(tt in unique(trt_intervention)){
  writeLines(sprintf('Missing patients in %s arm:',tt))
  print(itt_population_all$ID[itt_population_all$Treatment==tt &
                          !itt_population_all$ID %in% platcov_dat$ID])
}
# interventions
if(length(trt_intervention)==0) stop('no interventions!')
trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
```

## *Make modified intention to treat population*

```{r make_analysis_data}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID) %>%
  mutate(
    mITT = any(Per_protocol_sample==1 & Timepoint_ID>=3) &
      (sum(CT_NS<40)>2))

pop_table = platcov_dat %>% distinct(ID, .keep_all = T)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT)
```

## *Baseline characteristics*

```{r}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         daily_censor = all(censor=='left')) %>% 
  ungroup() %>%
  mutate(Sex = as.factor(ifelse(Sex==1,'Male','Female')),
         Site = as.factor(Site),
         Trt = factor(Trt, levels=c(ref_arm, trts)),
         Vaccinated = as.factor(ifelse(N_dose>0,'Yes','No')),
         Variant = as.factor(Variant),
         Time_since_last_dose = ifelse(is.na(Time_since_last_dose)&Vaccinated=='No',
                                       600,Time_since_last_dose),
         trt_color = 
           as.character(plyr::mapvalues(Trt,
                                   from = names(trt_colors),
                                   to = trt_colors)),
         Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time = scale(Study_time) #normalise
         )

Baseline_data = platcov_dat %>% ungroup() %>% 
  distinct(ID, .keep_all = T) %>%
  filter(Timepoint_ID==0) %>% 
  mutate(Baseline.viral.load = daily_VL)


tab.ff <- Baseline_data %>% filter(mITT) %>%
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'BMI', "Weight",
                    "Baseline.viral.load",'Sex','Fever_Baseline',
                    "Variant",'Symptom_onset','Vaccinated'),
    total_col = F, # add column with statistics for the whole sample
    add_row_total = F, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) 

df <- knitr::kable(tab.ff, format = 'latex')
writeLines(df, 'df.tex')

tab.ff = tab.ff%>%
  kbl(
    caption = NULL,
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
```

Some simple models for the baseline viral load. Which covariates best predict a high baseline viral load?

```{r baseline_VL_temporal_trend}
baseline_VL_time = ggplot(data=Baseline_data,
                          aes(x=Rand_date,
                              y=Baseline.viral.load, col=Variant)) +
  geom_point() + 
  labs(x = "Randomisation date", y = 'Baseline viral load',
       title = "All patients")+
  scale_y_continuous(breaks = 1:9,
                     labels = function(x) sprintf("10^%d", x))+
  theme_minimal(base_size = 18)+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "black", aes(group = 1))
  # guides(col = 'none')
baseline_VL_time
mod_baseline = lm(Baseline.viral.load~BMI+Age+Sex+Symptom_onset+Vaccinated+Variant+Site+Fever_Baseline,
                  data = Baseline_data)
summary(mod_baseline)
```

### All VL data

```{r bi_exponential, fig.width=10}
platcov_dat %>% ggplot(aes(x=Time, y = daily_VL)) +
  geom_point(aes(colour=daily_censor),alpha=0.2)+ 
  geom_smooth()+
   labs(x = "Days from randomisation", 
        y = 'Viral load')+
  scale_y_continuous(breaks = 1:9,
                     labels = function(x) sprintf("10^%d", x))+
  theme_minimal(base_size = 18)
```

### left versus right tonsil in the baseline samples

```{r}
day0_swab = platcov_dat %>% filter(Timepoint_ID==0, Site=='th001', Swab_ID!='Saliva')
day0_swab$tonsil = 'Right'
day0_swab$tonsil[grep(pattern = 'Left',x = day0_swab$Swab_ID)]='Left'
table(day0_swab$tonsil)
table(day0_swab$Swab_ID)
day0_swab = day0_swab %>% filter(daily_VL>3) %>%
  group_by(ID) %>%
  mutate(right_tonsil_mean = mean(log10_viral_load[tonsil=='Right']),
         right_tonsil_1 = log10_viral_load[Swab_ID=='Right_tonsil_1'],
         right_tonsil_2 = log10_viral_load[Swab_ID=='Right_tonsil_2'],
         left_tonsil_mean = mean(log10_viral_load[tonsil=='Left']),
         left_tonsil_1 = log10_viral_load[Swab_ID=='Left_tonsil_1'],
         left_tonsil_2 = log10_viral_load[Swab_ID=='Left_tonsil_2']) %>%
  distinct(ID, .keep_all = T)
par(mfrow=c(1,2),las=1)
plot(day0_swab$left_tonsil_mean, day0_swab$left_tonsil_1-day0_swab$left_tonsil_2,
     xlab='Mean left tonsil', ylab='Difference: first - second')
abline(lm( (left_tonsil_1-left_tonsil_2) ~ left_tonsil_mean, data=day0_swab),lwd=3, col='red')
abline(h=0, lty=2, lwd=2)
mean(day0_swab$left_tonsil_1>day0_swab$left_tonsil_2)

plot(day0_swab$right_tonsil_mean, day0_swab$right_tonsil_1-day0_swab$right_tonsil_2,
     xlab='Mean right tonsil', ylab='Difference: first - second')
abline(lm( (right_tonsil_1-right_tonsil_2) ~ right_tonsil_mean, data=day0_swab),lwd=3, col='red')
mean(day0_swab$right_tonsil_1>day0_swab$right_tonsil_2)
abline(h=0, lty=2, lwd=2)

par(mfrow=c(2,2))

hist(abs(day0_swab$right_tonsil_1-day0_swab$right_tonsil_2),main='',xlab='difference in right swabs')
hist(abs(day0_swab$left_tonsil_1-day0_swab$left_tonsil_2),main='',xlab='difference in left swabs')
mean(c(abs(day0_swab$left_tonsil_1-day0_swab$left_tonsil_2),
       abs(day0_swab$right_tonsil_1-day0_swab$right_tonsil_2)))

hist(abs(day0_swab$left_tonsil_1-day0_swab$right_tonsil_1),main='',xlab='difference in right versus left swabs (1st)')
hist(abs(day0_swab$left_tonsil_2-day0_swab$right_tonsil_2),main='',xlab='difference in right versus left swabs (2nd)')
mean(c(abs(day0_swab$left_tonsil_2-day0_swab$right_tonsil_2),
       abs(day0_swab$left_tonsil_1-day0_swab$right_tonsil_1)))


cor(day0_swab$right_tonsil_mean, day0_swab$left_tonsil_mean)
cor(day0_swab$right_tonsil_1, day0_swab$left_tonsil_1)
cor(day0_swab$right_tonsil_2, day0_swab$left_tonsil_2)

cor(day0_swab$right_tonsil_1, day0_swab$right_tonsil_2)
cor(day0_swab$left_tonsil_1, day0_swab$left_tonsil_2)

```

## Add serology

Add serology at days 0, 3, 7, 14.

Does baseline viral load correlate with baseline IgG?

```{r}
sero_dat = read_csv('Analysis_Data/Serology_IgG.csv')
sero_wide = 
  sero_dat %>% 
  filter(!is.na(log10_IgG)) %>% group_by(ID) %>%
  mutate(Day = ifelse(Day<=7, Day, 14)) %>%
  pivot_wider(names_from = Day, 
              values_from = log10_IgG,
              values_fill = NA,names_prefix = 'IgG_Day',
              values_fn = mean)
Baseline_data_sero = merge(Baseline_data, sero_wide, by = 'ID', all.x = T)%>%
  filter(!Trt %in% c('Regeneron','Evusheld'))

igg_d0=Baseline_data_sero %>% 
  ggplot(aes(x=Rand_date, y=IgG_Day0))+
  geom_point(alpha=0.4)+ theme_minimal()+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "red", aes(group = 1))+
  labs(title = "Day 0",
       x = "Randomisation date", y = "log 10 IgG titres")+ylim(1,6)

igg_d3=Baseline_data_sero %>%
  ggplot(aes(x=Rand_date, y=IgG_Day3))+
  geom_point(alpha=0.4)+ theme_minimal()+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "red", aes(group = 1))+
  labs(title = "Day 3",
       x = "Randomisation date", y = "log 10 IgG titres")+ylim(1,6)

igg_d7=Baseline_data_sero %>%
  ggplot(aes(x=Rand_date, y=IgG_Day7))+
  geom_point(alpha=0.4)+ theme_minimal()+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "red", aes(group = 1))+
  labs(title = "Day 7",
       x = "Randomisation date", y = "log 10 IgG titres")+ylim(1,6)

igg_d14=Baseline_data_sero %>%
  ggplot(aes(x=Rand_date, y=IgG_Day14))+
  geom_point(alpha=0.4)+ theme_minimal()+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "red", aes(group = 1))+
  labs(title = "Day 14",
       x = "Randomisation date", y = "log 10 IgG titres")+ylim(1,6)

grid.arrange(igg_d0, igg_d3, igg_d7, igg_d14, nrow=2)
```

## *Fit models*

### Naive model (individual fits)

```{r naive_model}
Baseline_data$naive_linear = NA
for(id in unique(Baseline_data$ID)){
  xx = platcov_dat %>% filter(ID==id, Time<Dmax)
  ind = which(Baseline_data$ID==id)
  if(sum(xx$censor=='none')<=6 | all(!xx$mITT)){
    Baseline_data$naive_linear[ind]=NA
    writeLines(sprintf('Cannot do %s', id))
  } else {
    if(!any(xx$censor=='left')){
        mod = lm(log10_viral_load ~ Time, data = xx)
    } else {
        mod = censReg::censReg(log10_viral_load ~ Time, left = max(xx$log10_cens_vl), data = xx)
    }
  }
  Baseline_data$naive_linear[ind]=coef(mod)['Time']
}
Baseline_naive = Baseline_data%>%filter(!is.na(naive_linear))

mod1=mgcv::gam(naive_linear ~ Trt + s(Study_time, k=5), 
               family = 'gaussian',
               data = Baseline_naive)
Baseline_naive$Mean_pred_no_stdy_drug = 
  predict(mod1, newdata = Baseline_naive%>%mutate(Trt='No study drug'))
Baseline_naive$Mean_pred_paxlovid = 
  predict(mod1, newdata = Baseline_naive%>%mutate(Trt='Nirmatrelvir'))

Baseline_naive %>% 
  ggplot(aes(x = Rand_date, y = naive_linear, col=Variant)) +
  geom_point() + theme_minimal(base_size = 18)+
  geom_line(color='black',data = Baseline_naive, aes(x=Rand_date, y=Mean_pred_no_stdy_drug),linewidth=1.5)+
  # geom_line(color=trt_colors['Nirmatrelvir + Ritonavir'],data = Baseline_naive, aes(x=Rand_date, y=Mean_pred_paxlovid),linewidth=1.5)+
  # geom_smooth(method = mgcv::gam, formula = y~s(x),
  #             se = T, color = "black", aes(group = 1))+
  labs(title = "Naive linear model fit", 
       subtitle="All data, assuming constant effect sizes",
       x = "Randomisation date", 
       y = "Clearance slope (log10 units per day)")
```

### Boxplots by treatment

```{r}
xx=platcov_dat %>% filter(Timepoint_ID==5) %>% distinct(ID, .keep_all = T)
summary(lm(daily_VL ~ Trt+Study_time, data = xx))
xx%>%
  ggplot(aes(y=daily_VL, x=Trt))+geom_boxplot()
```

### Full stan model

```{r}
#| echo: false
source('priors.R')

# Analysis data
Baseline_data = Baseline_data%>%filter(mITT)
platcov_dat_analysis = 
  platcov_dat %>% ungroup() %>%
  filter(Time <= Dmax, mITT) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset),
         BMI = ifelse(is.na(BMI), 22, BMI),
         Time_since_last_dose = ifelse(is.na(Time_since_last_dose),
                                       100, Time_since_last_dose))

quantile(table(platcov_dat_analysis$ID))

writeLines(sprintf('Full analysis dataset contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   length(unique(platcov_dat_analysis$ID)),
                   nrow(platcov_dat_analysis),
                   sum(platcov_dat_analysis$CT_NS<40),
                   round(100*mean(platcov_dat_analysis$CT_NS<40))))

covs_slope = c('Variant', 'Site', 'Study_time')
covs_intercept = c('Variant', 'Site','Symptom_onset')

covs_full_slope=c(covs_slope, 'Age_scaled','BMI',
            'Time_since_last_dose')

covs_full_int=c(covs_intercept, 'Age_scaled','BMI',
            'Time_since_last_dose')

stan_inputs = 
  make_stan_inputs(input_data_fit = platcov_dat_analysis,
                   int_covs_base = covs_intercept,
                   int_covs_full = covs_full_int,
                   slope_covs_base = covs_slope,
                   slope_covs_full = covs_full_slope,
                   trt_frmla = formula('~ Trt'),
                   epoch = NA,
                   Dmax = Dmax)
```

```{r setup_models}
all_mods = list.files('Stan_models',full.names = TRUE,pattern = '*stan')

model_settings = #rbind(
  expand.grid(mod = "Stan_models/Linear_model_RNaseP.stan",
                             prior = 1,
                             cov_matrices = 1)#,
                       # expand.grid(mod = all_mods[1],
                       #       prior = 1,
                       #       cov_matrices = 2))


model_settings$Niter = 2000
model_settings$Nwarmup = 1000
model_settings$Nthin = 4
model_settings$Nchain = 4

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')
save(model_settings, 
     platcov_dat_analysis,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

```{r}
if(RUN_MODELS){
  system(paste('Rscript --vanilla run_models_local.R',intervention))
}
```

```{r}
ff = list.files('Rout/', pattern = intervention)
ff = ff[grep(pattern = 'model_fits_',x = ff)]
if(!length(ff)==nrow(model_settings)) stop('not all outputs are ready for all model settings')
ff = paste0('Rout/',ff)
```

*main model selection*

```{r}
main_mod = which(model_settings$prior==1&
                   model_settings$cov_matrices==1&
                   model_settings$mod==all_mods[1])

model_cols = brewer.pal(n = 8, name = 'Dark2')[1:nrow(model_settings)]
names(model_cols) = paste('model', 1:nrow(model_settings))
```

```{r get_effects}
effect_ests=list()
for(i in 1:length(ff)){
  load(ff[i])
  effect_ests[[i]] = 
    summary(out, pars='trt_effect',use_cache=F,probs=my_probs)$summary[,c('2.5%','10%','50%','90%','97.5%'),drop=F]
  rownames(effect_ests[[i]]) = trts
}
```

```{r Figure_main, fig.height=6, fig.width=9}
# par(las=1, mar=c(5,5,2,2),cex.lab=1.3, cex.axis=1.3, mfrow=c(1,2))
# plot_serial_data(xx = platcov_dat_analysis,xlims = c(0,7))

par(las=1, mar=c(5,8,2,2))
plot_effect_estimates(effect_ests = effect_ests,
                      plot_models = 1:length(ff),
                      study_threshold = study_threshold,
                      mod_cols = model_cols[1:length(ff)],
                      my_pch = 15)
# title(intervention)
legend('right',pch=15:16,legend = c('Linear','Non-linear'),
       col = model_cols,inset=0.03, cex=1)
```

## Analysis of outcomes

We define two outcomes under the model:

-   Peak viral load under the non-linear model
-   Rate of viral clearance under the non-linear model

```{r slopes_plot, fig.height=7, fig.width=10}
load(ff[1])
par(las=1, cex.lab=1.5, cex.axis=1.5)
slope_out=make_slopes_plot(stan_out = out, 
                    analysis_data_stan = stan_inputs$analysis_data_stan,
                    ID_map = stan_inputs$ID_map,
                    data_summary = Baseline_data,
                    my_lims = c(2,50),
                    my_vals = c(5,15,25,35,45))

mod1=mgcv::gam(t_12_med ~ Trt + s(Study_time,k=10), 
               family = 'scat',
               data = slope_out)
slope_out$Mean_pred_no_stdy_drug = 
  predict(mod1, newdata = slope_out%>%mutate(Trt='No study drug'))
slope_out$Mean_pred_paxlovid = 
  predict(mod1, newdata = slope_out%>%mutate(Trt='Nirmatrelvir'))


half_lives_time = slope_out %>% 
  filter(Trt %in% c('No study drug', 'Ivermectin','Favipiravir','Fluoxetine')) %>% 
  ggplot(aes(x = Rand_date, y = t_12_med, col=Variant)) +
  geom_point() + theme_minimal(base_size = 15)+
  geom_line(color='black',
            data = slope_out, 
            aes(x=Rand_date, y=Mean_pred_no_stdy_drug),
            linewidth=1.5)+
  # geom_smooth(method = mgcv::gam, 
  #             formula = y~s(x),
  #             se = T, color = "black", 
  #             aes(group = 1)) +
  labs(title = "Ineffective arms", 
       subtitle="no drug; ivermectin; favipiravir; fluoxetine",
       x = "Randomisation date", y = "Clearance half-life (hours)")+
  geom_errorbar(aes(ymin = t_12_up, ymax = t_12_low), 
                width = 0.2, alpha=.5) +
  ylim(0,50)
half_lives_time


## Non-linear model
# load(ff[2])
# slope_out_nonlin=make_slopes_plot(stan_out = out, 
#                     analysis_data_stan = stan_inputs$analysis_data_stan,
#                     ID_map = stan_inputs$ID_map,
#                     data_summary = Baseline_data,
#                     my_lims = c(2,50),
#                     my_vals = c(5,15,25,35,45))
# 
# half_lives_time_nonlin = slope_out_nonlin %>% filter(Trt %in% c('No study drug', 'Ivermectin','Favipiravir','Fluoxetine')) %>% 
#   ggplot(aes(x = Rand_date, y = t_12_med, col=Variant)) +
#   geom_point() + theme_minimal()+
#   geom_smooth(method = mgcv::gam, formula = y~s(x),
#               se = T, color = "black", aes(group = 1))+
#   labs(title = "Viral clearance in patients not given an effective drug (non-linear model)",
#        x = "Randomisation date", y = "Clearance half-life (hours)")+
#   geom_errorbar(aes(ymin = t_12_up, ymax = t_12_low), width = 0.2, alpha=.5) +
#   ylim(0,50)
# # ggsave(filename = 'half_lives_time_nonlin.jpeg',device = 'jpeg', plot = half_lives_time_nonlin)
# half_lives_time_nonlin
```

predictors of slope

```{r}
mod_slope=lm(slope_median ~ Sex+Time_since_last_dose+Study_time, data = slope_out)
summary(mod_slope)
```

very fast clearing patients in no study drug arm

```{r}
ids = unlist(slope_out%>%filter(Trt %in% c('No study drug', 'Ivermectin', 'Favipiravir', Baseline.viral.load>4), slope_median< -1.5)%>% distinct(ID))
par(las=1, mfrow=c(2,2))
 plot_individ_curves(platcov_dat = platcov_dat, IDs = ids,xlims = c(0,14))
 
```

```{r IgG_slope_association}
slope_linear = merge(Baseline_data_sero, 
                     slope_out[, c('ID','slope_median','t_12_med',
                                   't_12_up','t_12_low')],
                     by = 'ID', all.y = T)

# Baseline data
igg_s_d0 = slope_linear %>% 
  ggplot(aes(x = IgG_Day0, y = t_12_med, col=Variant)) +
  geom_point() + theme_minimal()+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "black", aes(group = 1))+
  labs(title = "",
       x = "IgG on day 0", y = "Clearance half-life (hours)")+
  geom_errorbar(aes(ymin = t_12_up, ymax = t_12_low), width = 0.1, alpha=.3) +
  ylim(0,50)

# day 3 data - removing monoclonal arms
igg_s_d3 = slope_linear %>% filter(!Trt %in% c('Regeneron','Evusheld')) %>%
  ggplot(aes(x = IgG_Day3, y = t_12_med, col=Variant)) +
  geom_point() + theme_minimal()+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "black", aes(group = 1))+
  labs(title = "",
       x = "IgG on day 3", y = "Clearance half-life (hours)")+
  geom_errorbar(aes(ymin = t_12_up, ymax = t_12_low), width = 0.1, alpha=.2) +
  ylim(0,50)


# day 7 data - removing monoclonal arms
igg_s_d7 = slope_linear %>% filter(!Trt %in% c('Regeneron','Evusheld')) %>% 
  ggplot(aes(x = IgG_Day7, y = t_12_med, col=Variant)) +
  geom_point() + theme_minimal()+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "black", aes(group = 1))+
  labs(title = "",
       x = "IgG on day 7", y = "Clearance half-life (hours)")+
  geom_errorbar(aes(ymin = t_12_up, ymax = t_12_low), width = 0.1, alpha=.2) +
  ylim(0,50)


# day 14 data - removing monoclonal arms
igg_s_d14 = slope_linear %>% filter(!Trt %in% c('Regeneron','Evusheld')) %>% 
  ggplot(aes(x = IgG_Day14, y = t_12_med, col=Variant)) +
  geom_point() + theme_minimal()+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "black", aes(group = 1))+
  labs(title = "",
       x = "IgG on day 14", y = "Clearance half-life (hours)")+
  geom_errorbar(aes(ymin = t_12_up, ymax = t_12_low), width = 0.1, alpha=.2) +
  ylim(0,50)

grid.arrange(igg_s_d0, igg_s_d3, igg_s_d7, igg_s_d14, nrow=2)
```

```{r coef_plot}
coef_to_plot=1
coef_model = which(model_settings$prior==1&
                     model_settings$cov_matrices==coef_to_plot&
                     model_settings$mod==all_mods[2])
load(ff[coef_model])
par(las=1, mfrow=c(1,2), mar=c(5,7,2,2))
plot_coef_effects(stan_out = out,cov_mat = coef_to_plot,stan_inputs = stan_inputs)
```

# Fever and symptom clearance

## fever

```{r fever_clearance}
platcov_temp = read_csv(file = 'Analysis_Data/fever_interim.csv')

platcov_temp = platcov_temp %>% 
  filter(ID %in% platcov_dat_analysis$ID) %>%
  ungroup() %>%
  arrange(ID, Time) %>% 
  group_by(ID) %>%
  mutate(include_analysis = any(Time>=2),
         Fever_Baseline = any(ax_temperature>37 & Time<=1)) %>%
  ungroup() %>% filter(include_analysis, Fever_Baseline, Time>=0)

length(unique(platcov_temp$ID))
temp_clearance = calculate_fever_clearance(temp_dat = platcov_temp,
                                           window_clear = 24/24)

temp_clearance = merge(slope_out, temp_clearance, by='ID')
temp_clearance %>% 
  ggplot(aes(x = t_12_med, y = clearance_time, col=Trt)) +
  geom_point() + theme_minimal()+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "black", aes(group = 1))+
  labs(title = "",
       x = "Clearance half-life (hours)", 
       y = 'Fever clearance time (days)')+
  geom_errorbar(aes(xmin = t_12_up, xmax = t_12_low), width = 0.1, alpha=.2,)

temp_clearance %>% 
  ggplot(aes(x = Rand_date, y = clearance_time, col=Trt)) +
  geom_point() + theme_minimal()+
  geom_smooth(method = mgcv::gam, formula = y~s(x),
              se = T, color = "black", aes(group = 1))+
  labs(title = "",
       x = "Date of enrollment", y = 'Fever clearance time (days)')+
  ylim(0,7)

mod = lm(clearance_time ~ t_12_med + Trt, data = temp_clearance)
summary(mod)

mod = lm(clearance_time ~ t_12_med, data = temp_clearance)
summary(mod)

plot(temp_clearance$t_12_med, temp_clearance$clearance_time)

fit <- survfit(Surv(clearance_time, clearance_time_cens) ~ Trt, data = temp_clearance) 
survdiff(Surv(clearance_time, clearance_time_cens) ~ Trt, data = temp_clearance) 
ggsurvplot(fit = fit, data = temp_clearance,risk.table = T,
           xlab = 'Time (days)', ylab = 'Proportion with fever',
           ggtheme = theme_light(),
           cex.lab=1.5,cex.axis=1.5)

temp_clearance = merge(slope_out, temp_clearance, by='ID')
```

## Symptoms

```{r symptom_resolution}
symp_dat = read.csv('Analysis_Data/symptoms_interim.csv')

symp_dat = symp_dat %>% filter(ID %in% platcov_dat_analysis$ID) %>%
  ungroup() %>%
  arrange(ID, Timepoint_ID)
symp_dat = merge(symp_dat, Baseline_data[, c('ID', 'Trt')], by='ID', all.x=T)

symp_dat = symp_dat %>%
  group_by(ID) %>%
  mutate(symp_censored = as.numeric(any(Any_symptom==0)),
         Symptom_resolution = ifelse(symp_censored==1,
                                     Timepoint_ID[which(Any_symptom==0)[1]],
                                     max(Timepoint_ID))) %>% ungroup()
platcov_symp = symp_dat %>% distinct(ID, .keep_all = T)

fit <- survfit(Surv(Symptom_resolution, symp_censored) ~ Trt, data = platcov_symp)
survdiff(Surv(Symptom_resolution, symp_censored) ~ Trt, data = platcov_symp)
ggsurvplot(fit = fit, data = platcov_symp,
           xlab = 'Time (days)', ylab = 'Proportion with symptoms',
           ggtheme = theme_light(),
          cex.lab=1.5,cex.axis=1.5)

# 
# symp_rebound = symp_dat %>% group_by(ID) %>%
#   mutate(rebound = case_when(
#     symp_censored==0 ~ NA,
#     symp_censored==1 ~ any(Any_symptom[Timepoint_ID>Symptom_resolution+1]==1)
#   )) %>% distinct(ID, .keep_all = T)
# table(symp_rebound$rebound, useNA = 'ifany')
```
